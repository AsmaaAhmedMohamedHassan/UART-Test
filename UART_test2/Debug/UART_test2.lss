
UART_test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000025d6  0000266a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  00002672  2**0
                  ALLOC
  3 .stab         00001ea8  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d62  00000000  00000000  0000451c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000527e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000053de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000556d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000075b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000086b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009638  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000097b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__vector_11>
      30:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ed       	ldi	r30, 0xD6	; 214
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 77 12 	call	0x24ee	; 0x24ee <main>
      8a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*SET PIN DIRECTIONS*/

	DIO_U8_DDRA_REG = conc(DIO_U8_PA7_DIRECTION,DIO_U8_PA6_DIRECTION,DIO_U8_PA5_DIRECTION,DIO_U8_PA4_DIRECTION,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
	                       DIO_U8_PA3_DIRECTION,DIO_U8_PA2_DIRECTION,DIO_U8_PA1_DIRECTION,DIO_U8_PA0_DIRECTION);

	DIO_U8_DDRB_REG = conc(DIO_U8_PB7_DIRECTION,DIO_U8_PB6_DIRECTION,DIO_U8_PB5_DIRECTION,DIO_U8_PB4_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
	                       DIO_U8_PB3_DIRECTION,DIO_U8_PB2_DIRECTION,DIO_U8_PB1_DIRECTION,DIO_U8_PB0_DIRECTION);

	DIO_U8_DDRC_REG = conc(DIO_U8_PC7_DIRECTION,DIO_U8_PC6_DIRECTION,DIO_U8_PC5_DIRECTION,DIO_U8_PC4_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
	                       DIO_U8_PC3_DIRECTION,DIO_U8_PC2_DIRECTION,DIO_U8_PC1_DIRECTION,DIO_U8_PC0_DIRECTION);
						   
	DIO_U8_DDRD_REG = conc(DIO_U8_PD7_DIRECTION,DIO_U8_PD6_DIRECTION,DIO_U8_PD5_DIRECTION,DIO_U8_PD4_DIRECTION,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8a eb       	ldi	r24, 0xBA	; 186
     cc4:	80 83       	st	Z, r24
	                       DIO_U8_PD3_DIRECTION,DIO_U8_PD2_DIRECTION,DIO_U8_PD1_DIRECTION,DIO_U8_PD0_DIRECTION);
	/*SET INITIAL VALUES FOR PINS*/   
	DIO_U8_PORTA_REG = conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
	                       DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);
                                                                                                                 
	DIO_U8_PORTB_REG = conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
	                       DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);
						                                                                                         
	DIO_U8_PORTC_REG = conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
	                       DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);
						                                                                                         
	DIO_U8_PORTD_REG = conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	10 82       	st	Z, r1
	                       DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);	
	
						   
						   
						   
}	
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <DIO_u8SetPinDirection>:



u8   DIO_u8SetPinDirection (u8 copy_u8PortId, u8   copy_u8PinId ,u8  copy_u8PinDirection) 
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <DIO_u8SetPinDirection+0x6>
     cea:	00 d0       	rcall	.+0      	; 0xcec <DIO_u8SetPinDirection+0x8>
     cec:	00 d0       	rcall	.+0      	; 0xcee <DIO_u8SetPinDirection+0xa>
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	8a 83       	std	Y+2, r24	; 0x02
     cf4:	6b 83       	std	Y+3, r22	; 0x03
     cf6:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = STD_TYPES_OK ;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_u8_PORTD)&&(copy_u8PinId <= DIO_u8_PIN7)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO_u8SetPinDirection+0x20>
     d02:	dd c0       	rjmp	.+442    	; 0xebe <DIO_u8SetPinDirection+0x1da>
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x28>
     d0a:	d9 c0       	rjmp	.+434    	; 0xebe <DIO_u8SetPinDirection+0x1da>
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	88 23       	and	r24, r24
     d10:	21 f0       	breq	.+8      	; 0xd1a <DIO_u8SetPinDirection+0x36>
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	09 f0       	breq	.+2      	; 0xd1a <DIO_u8SetPinDirection+0x36>
     d18:	d2 c0       	rjmp	.+420    	; 0xebe <DIO_u8SetPinDirection+0x1da>
       &&((copy_u8PinDirection == DIO_u8_INPUT)||(copy_u8PinDirection ==DIO_u8_OUTPUT)))
	{
		switch(copy_u8PortId)
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	3e 83       	std	Y+6, r19	; 0x06
     d22:	2d 83       	std	Y+5, r18	; 0x05
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	9e 81       	ldd	r25, Y+6	; 0x06
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <DIO_u8SetPinDirection+0x4c>
     d2e:	43 c0       	rjmp	.+134    	; 0xdb6 <DIO_u8SetPinDirection+0xd2>
     d30:	2d 81       	ldd	r18, Y+5	; 0x05
     d32:	3e 81       	ldd	r19, Y+6	; 0x06
     d34:	22 30       	cpi	r18, 0x02	; 2
     d36:	31 05       	cpc	r19, r1
     d38:	2c f4       	brge	.+10     	; 0xd44 <DIO_u8SetPinDirection+0x60>
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	71 f0       	breq	.+28     	; 0xd5e <DIO_u8SetPinDirection+0x7a>
     d42:	be c0       	rjmp	.+380    	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
     d44:	2d 81       	ldd	r18, Y+5	; 0x05
     d46:	3e 81       	ldd	r19, Y+6	; 0x06
     d48:	22 30       	cpi	r18, 0x02	; 2
     d4a:	31 05       	cpc	r19, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <DIO_u8SetPinDirection+0x6c>
     d4e:	5f c0       	rjmp	.+190    	; 0xe0e <DIO_u8SetPinDirection+0x12a>
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <DIO_u8SetPinDirection+0x78>
     d5a:	85 c0       	rjmp	.+266    	; 0xe66 <DIO_u8SetPinDirection+0x182>
     d5c:	b1 c0       	rjmp	.+354    	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
		{
		  case DIO_u8_PORTA :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	88 23       	and	r24, r24
     d62:	a9 f4       	brne	.+42     	; 0xd8e <DIO_u8SetPinDirection+0xaa>
			 {
				 CLR_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     d64:	aa e3       	ldi	r26, 0x3A	; 58
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_u8SetPinDirection+0x9e>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_u8SetPinDirection+0x9a>
     d86:	80 95       	com	r24
     d88:	84 23       	and	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	99 c0       	rjmp	.+306    	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     d8e:	aa e3       	ldi	r26, 0x3A	; 58
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_u8SetPinDirection+0xc8>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_u8SetPinDirection+0xc4>
     db0:	84 2b       	or	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	85 c0       	rjmp	.+266    	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 }
		  break;
		  case DIO_u8_PORTB :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	88 23       	and	r24, r24
     dba:	a9 f4       	brne	.+42     	; 0xde6 <DIO_u8SetPinDirection+0x102>
			 {
				 CLR_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     dbc:	a7 e3       	ldi	r26, 0x37	; 55
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_u8SetPinDirection+0xf6>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_u8SetPinDirection+0xf2>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	6d c0       	rjmp	.+218    	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_u8SetPinDirection+0x120>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_u8SetPinDirection+0x11c>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	59 c0       	rjmp	.+178    	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 }
		  break;
		  case DIO_u8_PORTC :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	88 23       	and	r24, r24
     e12:	a9 f4       	brne	.+42     	; 0xe3e <DIO_u8SetPinDirection+0x15a>
			 {
				 CLR_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     e14:	a4 e3       	ldi	r26, 0x34	; 52
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e4 e3       	ldi	r30, 0x34	; 52
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_u8SetPinDirection+0x14e>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_u8SetPinDirection+0x14a>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	41 c0       	rjmp	.+130    	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     e3e:	a4 e3       	ldi	r26, 0x34	; 52
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e4 e3       	ldi	r30, 0x34	; 52
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_u8SetPinDirection+0x178>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_u8SetPinDirection+0x174>
     e60:	84 2b       	or	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	2d c0       	rjmp	.+90     	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 }
		 break;
		 case DIO_u8_PORTD :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	88 23       	and	r24, r24
     e6a:	a9 f4       	brne	.+42     	; 0xe96 <DIO_u8SetPinDirection+0x1b2>
			 {
				 CLR_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     e6c:	a1 e3       	ldi	r26, 0x31	; 49
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e1 e3       	ldi	r30, 0x31	; 49
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_u8SetPinDirection+0x1a6>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_u8SetPinDirection+0x1a2>
     e8e:	80 95       	com	r24
     e90:	84 23       	and	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	15 c0       	rjmp	.+42     	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     e96:	a1 e3       	ldi	r26, 0x31	; 49
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e3       	ldi	r30, 0x31	; 49
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_u8SetPinDirection+0x1d0>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_u8SetPinDirection+0x1cc>
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <DIO_u8SetPinDirection+0x1dc>
			 		 
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK;
     ebe:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return local_u8ErrorState;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec2:	26 96       	adiw	r28, 0x06	; 6
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <DIO_u8SetPinValue>:

u8   DIO_u8SetPinValue     (u8 copy_u8PortId, u8   copy_u8PinId ,u8  copy_u8PinValue) 
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <DIO_u8SetPinValue+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8SetPinValue+0x8>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8SetPinValue+0xa>
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	8a 83       	std	Y+2, r24	; 0x02
     ee4:	6b 83       	std	Y+3, r22	; 0x03
     ee6:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = STD_TYPES_OK;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PinId<=DIO_u8_PIN7)&&
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <DIO_u8SetPinValue+0x20>
     ef2:	dd c0       	rjmp	.+442    	; 0x10ae <DIO_u8SetPinValue+0x1da>
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	88 30       	cpi	r24, 0x08	; 8
     ef8:	08 f0       	brcs	.+2      	; 0xefc <DIO_u8SetPinValue+0x28>
     efa:	d9 c0       	rjmp	.+434    	; 0x10ae <DIO_u8SetPinValue+0x1da>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	88 23       	and	r24, r24
     f00:	21 f0       	breq	.+8      	; 0xf0a <DIO_u8SetPinValue+0x36>
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	09 f0       	breq	.+2      	; 0xf0a <DIO_u8SetPinValue+0x36>
     f08:	d2 c0       	rjmp	.+420    	; 0x10ae <DIO_u8SetPinValue+0x1da>
	  ((copy_u8PinValue ==LOW)||(copy_u8PinValue ==HIGH)))
	  {
		  switch(copy_u8PortId)
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	3e 83       	std	Y+6, r19	; 0x06
     f12:	2d 83       	std	Y+5, r18	; 0x05
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	91 05       	cpc	r25, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_u8SetPinValue+0x4c>
     f1e:	43 c0       	rjmp	.+134    	; 0xfa6 <DIO_u8SetPinValue+0xd2>
     f20:	2d 81       	ldd	r18, Y+5	; 0x05
     f22:	3e 81       	ldd	r19, Y+6	; 0x06
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <DIO_u8SetPinValue+0x60>
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	71 f0       	breq	.+28     	; 0xf4e <DIO_u8SetPinValue+0x7a>
     f32:	be c0       	rjmp	.+380    	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
     f34:	2d 81       	ldd	r18, Y+5	; 0x05
     f36:	3e 81       	ldd	r19, Y+6	; 0x06
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_u8SetPinValue+0x6c>
     f3e:	5f c0       	rjmp	.+190    	; 0xffe <DIO_u8SetPinValue+0x12a>
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	9e 81       	ldd	r25, Y+6	; 0x06
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <DIO_u8SetPinValue+0x78>
     f4a:	85 c0       	rjmp	.+266    	; 0x1056 <DIO_u8SetPinValue+0x182>
     f4c:	b1 c0       	rjmp	.+354    	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		  {
			 case DIO_u8_PORTA :
		       if(copy_u8PinValue == LOW)
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	88 23       	and	r24, r24
     f52:	a9 f4       	brne	.+42     	; 0xf7e <DIO_u8SetPinValue+0xaa>
		        {
			      CLR_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     f54:	ab e3       	ldi	r26, 0x3B	; 59
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e3       	ldi	r30, 0x3B	; 59
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_u8SetPinValue+0x9e>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_u8SetPinValue+0x9a>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	99 c0       	rjmp	.+306    	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     f7e:	ab e3       	ldi	r26, 0x3B	; 59
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	eb e3       	ldi	r30, 0x3B	; 59
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8SetPinValue+0xc8>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8SetPinValue+0xc4>
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	85 c0       	rjmp	.+266    	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTB :
		       if(copy_u8PinValue == LOW)
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	88 23       	and	r24, r24
     faa:	a9 f4       	brne	.+42     	; 0xfd6 <DIO_u8SetPinValue+0x102>
		        {
			      CLR_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     fac:	a8 e3       	ldi	r26, 0x38	; 56
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e8 e3       	ldi	r30, 0x38	; 56
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_u8SetPinValue+0xf6>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_u8SetPinValue+0xf2>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	6d c0       	rjmp	.+218    	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     fd6:	a8 e3       	ldi	r26, 0x38	; 56
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_u8SetPinValue+0x120>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_u8SetPinValue+0x11c>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	59 c0       	rjmp	.+178    	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTC :
		       if(copy_u8PinValue == LOW)
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	88 23       	and	r24, r24
    1002:	a9 f4       	brne	.+42     	; 0x102e <DIO_u8SetPinValue+0x15a>
		        {
			      CLR_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
    1004:	a5 e3       	ldi	r26, 0x35	; 53
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e5 e3       	ldi	r30, 0x35	; 53
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8SetPinValue+0x14e>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8SetPinValue+0x14a>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	41 c0       	rjmp	.+130    	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
    102e:	a5 e3       	ldi	r26, 0x35	; 53
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e3       	ldi	r30, 0x35	; 53
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8SetPinValue+0x178>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8SetPinValue+0x174>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	2d c0       	rjmp	.+90     	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTD :
		       if(copy_u8PinValue == LOW)
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	88 23       	and	r24, r24
    105a:	a9 f4       	brne	.+42     	; 0x1086 <DIO_u8SetPinValue+0x1b2>
		        {
			      CLR_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_u8SetPinValue+0x1a6>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_u8SetPinValue+0x1a2>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	15 c0       	rjmp	.+42     	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    1086:	a2 e3       	ldi	r26, 0x32	; 50
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e2 e3       	ldi	r30, 0x32	; 50
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_u8SetPinValue+0x1d0>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_u8SetPinValue+0x1cc>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <DIO_u8SetPinValue+0x1dc>
			   
		  }
	  }
	else
	{
		local_u8ErrorState =STD_TYPES_NOK ;
    10ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    10b2:	26 96       	adiw	r28, 0x06	; 6
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <DIO_u8GetPinValue>:
 
u8   DIO_u8GetPinValue     (u8 copy_u8PortId, u8   copy_u8PinId ,u8  *copy_Pu8PinValue) 
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	28 97       	sbiw	r28, 0x08	; 8
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	6c 83       	std	Y+4, r22	; 0x04
    10dc:	5e 83       	std	Y+6, r21	; 0x06
    10de:	4d 83       	std	Y+5, r20	; 0x05
	u8 local_u8ErrorState = STD_TYPES_OK;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	8a 83       	std	Y+2, r24	; 0x02
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PinId <=DIO_u8_PIN7)&&(copy_Pu8PinValue != NULL))
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_u8GetPinValue+0x28>
    10ea:	9f c0       	rjmp	.+318    	; 0x122a <DIO_u8GetPinValue+0x166>
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <DIO_u8GetPinValue+0x30>
    10f2:	9b c0       	rjmp	.+310    	; 0x122a <DIO_u8GetPinValue+0x166>
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	09 f4       	brne	.+2      	; 0x10fe <DIO_u8GetPinValue+0x3a>
    10fc:	96 c0       	rjmp	.+300    	; 0x122a <DIO_u8GetPinValue+0x166>
	{
		u8 local_returnValue;
		switch(copy_u8PortId)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	38 87       	std	Y+8, r19	; 0x08
    1106:	2f 83       	std	Y+7, r18	; 0x07
    1108:	4f 81       	ldd	r20, Y+7	; 0x07
    110a:	58 85       	ldd	r21, Y+8	; 0x08
    110c:	41 30       	cpi	r20, 0x01	; 1
    110e:	51 05       	cpc	r21, r1
    1110:	a9 f1       	breq	.+106    	; 0x117c <DIO_u8GetPinValue+0xb8>
    1112:	8f 81       	ldd	r24, Y+7	; 0x07
    1114:	98 85       	ldd	r25, Y+8	; 0x08
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	34 f4       	brge	.+12     	; 0x1128 <DIO_u8GetPinValue+0x64>
    111c:	2f 81       	ldd	r18, Y+7	; 0x07
    111e:	38 85       	ldd	r19, Y+8	; 0x08
    1120:	21 15       	cp	r18, r1
    1122:	31 05       	cpc	r19, r1
    1124:	71 f0       	breq	.+28     	; 0x1142 <DIO_u8GetPinValue+0x7e>
    1126:	82 c0       	rjmp	.+260    	; 0x122c <DIO_u8GetPinValue+0x168>
    1128:	4f 81       	ldd	r20, Y+7	; 0x07
    112a:	58 85       	ldd	r21, Y+8	; 0x08
    112c:	42 30       	cpi	r20, 0x02	; 2
    112e:	51 05       	cpc	r21, r1
    1130:	09 f4       	brne	.+2      	; 0x1134 <DIO_u8GetPinValue+0x70>
    1132:	41 c0       	rjmp	.+130    	; 0x11b6 <DIO_u8GetPinValue+0xf2>
    1134:	8f 81       	ldd	r24, Y+7	; 0x07
    1136:	98 85       	ldd	r25, Y+8	; 0x08
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	91 05       	cpc	r25, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <DIO_u8GetPinValue+0x7c>
    113e:	58 c0       	rjmp	.+176    	; 0x11f0 <DIO_u8GetPinValue+0x12c>
    1140:	75 c0       	rjmp	.+234    	; 0x122c <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA :
			 local_returnValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
    1142:	e9 e3       	ldi	r30, 0x39	; 57
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a9 01       	movw	r20, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8GetPinValue+0x96>
    1156:	55 95       	asr	r21
    1158:	47 95       	ror	r20
    115a:	8a 95       	dec	r24
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8GetPinValue+0x92>
    115e:	ca 01       	movw	r24, r20
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	29 f4       	brne	.+10     	; 0x1174 <DIO_u8GetPinValue+0xb0>
			  *copy_Pu8PinValue = HIGH;
    116a:	ed 81       	ldd	r30, Y+5	; 0x05
    116c:	fe 81       	ldd	r31, Y+6	; 0x06
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 83       	st	Z, r24
    1172:	5c c0       	rjmp	.+184    	; 0x122c <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 
    1174:	ed 81       	ldd	r30, Y+5	; 0x05
    1176:	fe 81       	ldd	r31, Y+6	; 0x06
    1178:	10 82       	st	Z, r1
    117a:	58 c0       	rjmp	.+176    	; 0x122c <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTB :
			  local_returnValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
    117c:	e6 e3       	ldi	r30, 0x36	; 54
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_u8GetPinValue+0xd0>
    1190:	55 95       	asr	r21
    1192:	47 95       	ror	r20
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_u8GetPinValue+0xcc>
    1198:	ca 01       	movw	r24, r20
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	29 f4       	brne	.+10     	; 0x11ae <DIO_u8GetPinValue+0xea>
			  *copy_Pu8PinValue = HIGH;
    11a4:	ed 81       	ldd	r30, Y+5	; 0x05
    11a6:	fe 81       	ldd	r31, Y+6	; 0x06
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 83       	st	Z, r24
    11ac:	3f c0       	rjmp	.+126    	; 0x122c <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
    11ae:	ed 81       	ldd	r30, Y+5	; 0x05
    11b0:	fe 81       	ldd	r31, Y+6	; 0x06
    11b2:	10 82       	st	Z, r1
    11b4:	3b c0       	rjmp	.+118    	; 0x122c <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTC :
			 local_returnValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
    11b6:	e3 e3       	ldi	r30, 0x33	; 51
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8GetPinValue+0x10a>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8GetPinValue+0x106>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	29 f4       	brne	.+10     	; 0x11e8 <DIO_u8GetPinValue+0x124>
			  *copy_Pu8PinValue = HIGH;
    11de:	ed 81       	ldd	r30, Y+5	; 0x05
    11e0:	fe 81       	ldd	r31, Y+6	; 0x06
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24
    11e6:	22 c0       	rjmp	.+68     	; 0x122c <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
    11e8:	ed 81       	ldd	r30, Y+5	; 0x05
    11ea:	fe 81       	ldd	r31, Y+6	; 0x06
    11ec:	10 82       	st	Z, r1
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTD :
			 local_returnValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
    11f0:	e0 e3       	ldi	r30, 0x30	; 48
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_u8GetPinValue+0x144>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_u8GetPinValue+0x140>
    120c:	ca 01       	movw	r24, r20
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	29 f4       	brne	.+10     	; 0x1222 <DIO_u8GetPinValue+0x15e>
			  *copy_Pu8PinValue = HIGH;
    1218:	ed 81       	ldd	r30, Y+5	; 0x05
    121a:	fe 81       	ldd	r31, Y+6	; 0x06
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 83       	st	Z, r24
    1220:	05 c0       	rjmp	.+10     	; 0x122c <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
    1222:	ed 81       	ldd	r30, Y+5	; 0x05
    1224:	fe 81       	ldd	r31, Y+6	; 0x06
    1226:	10 82       	st	Z, r1
    1228:	01 c0       	rjmp	.+2      	; 0x122c <DIO_u8GetPinValue+0x168>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
    122a:	1a 82       	std	Y+2, r1	; 0x02
	}
	return local_u8ErrorState ;
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
	
	
	
}
    122e:	28 96       	adiw	r28, 0x08	; 8
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <DIO_u8SetPortDirection>:

u8   DIO_u8SetPortDirection (u8 copy_u8PortId, u8   copy_u8PinDirection)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_u8SetPortDirection+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <DIO_u8SetPortDirection+0x8>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8a 83       	std	Y+2, r24	; 0x02
    1250:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK ;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&((copy_u8PinDirection ==DIO_u8_INPUT)||(copy_u8PinDirection ==DIO_u8_OUTPUT)))
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	08 f0       	brcs	.+2      	; 0x125e <DIO_u8SetPortDirection+0x1e>
    125c:	56 c0       	rjmp	.+172    	; 0x130a <DIO_u8SetPortDirection+0xca>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	88 23       	and	r24, r24
    1262:	21 f0       	breq	.+8      	; 0x126c <DIO_u8SetPortDirection+0x2c>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	09 f0       	breq	.+2      	; 0x126c <DIO_u8SetPortDirection+0x2c>
    126a:	4f c0       	rjmp	.+158    	; 0x130a <DIO_u8SetPortDirection+0xca>
	{
		switch(copy_u8PortId)
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3d 83       	std	Y+5, r19	; 0x05
    1274:	2c 83       	std	Y+4, r18	; 0x04
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	09 f1       	breq	.+66     	; 0x12c2 <DIO_u8SetPortDirection+0x82>
    1280:	2c 81       	ldd	r18, Y+4	; 0x04
    1282:	3d 81       	ldd	r19, Y+5	; 0x05
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <DIO_u8SetPortDirection+0x54>
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 f0       	breq	.+24     	; 0x12aa <DIO_u8SetPortDirection+0x6a>
    1292:	3c c0       	rjmp	.+120    	; 0x130c <DIO_u8SetPortDirection+0xcc>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	f1 f0       	breq	.+60     	; 0x12da <DIO_u8SetPortDirection+0x9a>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	29 f1       	breq	.+74     	; 0x12f2 <DIO_u8SetPortDirection+0xb2>
    12a8:	31 c0       	rjmp	.+98     	; 0x130c <DIO_u8SetPortDirection+0xcc>
		{
			case DIO_u8_PORTA :
			  if(copy_u8PinDirection == HIGH)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	29 f4       	brne	.+10     	; 0x12ba <DIO_u8SetPortDirection+0x7a>
			  {
				 SET_PORT(DIO_U8_DDRA_REG);
    12b0:	ea e3       	ldi	r30, 0x3A	; 58
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	80 83       	st	Z, r24
    12b8:	29 c0       	rjmp	.+82     	; 0x130c <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRA_REG);
    12ba:	ea e3       	ldi	r30, 0x3A	; 58
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	10 82       	st	Z, r1
    12c0:	25 c0       	rjmp	.+74     	; 0x130c <DIO_u8SetPortDirection+0xcc>
			  }
			break;  
			case DIO_u8_PORTB :
			  if(copy_u8PinDirection == HIGH)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	29 f4       	brne	.+10     	; 0x12d2 <DIO_u8SetPortDirection+0x92>
			  {
				 SET_PORT(DIO_U8_DDRB_REG);
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	80 83       	st	Z, r24
    12d0:	1d c0       	rjmp	.+58     	; 0x130c <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRB_REG);
    12d2:	e7 e3       	ldi	r30, 0x37	; 55
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	10 82       	st	Z, r1
    12d8:	19 c0       	rjmp	.+50     	; 0x130c <DIO_u8SetPortDirection+0xcc>
			  }
			break;
			case DIO_u8_PORTC :
			  if(copy_u8PinDirection == HIGH)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	29 f4       	brne	.+10     	; 0x12ea <DIO_u8SetPortDirection+0xaa>
			  {
				 SET_PORT(DIO_U8_DDRC_REG);
    12e0:	e4 e3       	ldi	r30, 0x34	; 52
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRC_REG);
    12ea:	e4 e3       	ldi	r30, 0x34	; 52
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	10 82       	st	Z, r1
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <DIO_u8SetPortDirection+0xcc>
			  }
			break;
			case DIO_u8_PORTD :
			  if(copy_u8PinDirection == HIGH)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	29 f4       	brne	.+10     	; 0x1302 <DIO_u8SetPortDirection+0xc2>
			  {
				 SET_PORT(DIO_U8_DDRD_REG);
    12f8:	e1 e3       	ldi	r30, 0x31	; 49
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	80 83       	st	Z, r24
    1300:	05 c0       	rjmp	.+10     	; 0x130c <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRD_REG);
    1302:	e1 e3       	ldi	r30, 0x31	; 49
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	10 82       	st	Z, r1
    1308:	01 c0       	rjmp	.+2      	; 0x130c <DIO_u8SetPortDirection+0xcc>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK;
    130a:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <DIO_u8SetPortValue>:


u8   DIO_u8SetPortValue    (u8 copy_u8PortId, u8   copy_u8PortValue) 
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_u8SetPortValue+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_u8SetPortValue+0x8>
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PortValue<=MAX_PORT_VALUE))
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	98 f5       	brcc	.+102    	; 0x13a0 <DIO_u8SetPortValue+0x82>
	{
		switch(copy_u8PortId)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3d 83       	std	Y+5, r19	; 0x05
    1342:	2c 83       	std	Y+4, r18	; 0x04
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	d1 f0       	breq	.+52     	; 0x1382 <DIO_u8SetPortValue+0x64>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <DIO_u8SetPortValue+0x44>
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 f0       	breq	.+24     	; 0x1378 <DIO_u8SetPortValue+0x5a>
    1360:	20 c0       	rjmp	.+64     	; 0x13a2 <DIO_u8SetPortValue+0x84>
    1362:	2c 81       	ldd	r18, Y+4	; 0x04
    1364:	3d 81       	ldd	r19, Y+5	; 0x05
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	81 f0       	breq	.+32     	; 0x138c <DIO_u8SetPortValue+0x6e>
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	81 f0       	breq	.+32     	; 0x1396 <DIO_u8SetPortValue+0x78>
    1376:	15 c0       	rjmp	.+42     	; 0x13a2 <DIO_u8SetPortValue+0x84>
		{
			case DIO_u8_PORTA :
				DIO_U8_PORTA_REG = copy_u8PortValue;
    1378:	eb e3       	ldi	r30, 0x3B	; 59
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	80 83       	st	Z, r24
    1380:	10 c0       	rjmp	.+32     	; 0x13a2 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTB :
				DIO_U8_PORTB_REG = copy_u8PortValue;
    1382:	e8 e3       	ldi	r30, 0x38	; 56
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	80 83       	st	Z, r24
    138a:	0b c0       	rjmp	.+22     	; 0x13a2 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTC :
				DIO_U8_PORTC_REG = copy_u8PortValue;
    138c:	e5 e3       	ldi	r30, 0x35	; 53
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	80 83       	st	Z, r24
    1394:	06 c0       	rjmp	.+12     	; 0x13a2 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTD :
				DIO_U8_PORTD_REG = copy_u8PortValue;
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	80 83       	st	Z, r24
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <DIO_u8SetPortValue+0x84>
		}
		
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
    13a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue    (u8 copy_u8PortId, u8 * copy_Pu8PortValue) 
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_u8GetPortValue+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_u8GetPortValue+0x8>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <DIO_u8GetPortValue+0xa>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	7c 83       	std	Y+4, r23	; 0x04
    13c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_Pu8PortValue != NULL))
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <DIO_u8GetPortValue+0x20>
    13d2:	3f c0       	rjmp	.+126    	; 0x1452 <DIO_u8GetPortValue+0x9e>
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	d9 f1       	breq	.+118    	; 0x1452 <DIO_u8GetPortValue+0x9e>
	{
		switch(copy_u8PortId)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3e 83       	std	Y+6, r19	; 0x06
    13e4:	2d 83       	std	Y+5, r18	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	e1 f0       	breq	.+56     	; 0x1428 <DIO_u8GetPortValue+0x74>
    13f0:	2d 81       	ldd	r18, Y+5	; 0x05
    13f2:	3e 81       	ldd	r19, Y+6	; 0x06
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	2c f4       	brge	.+10     	; 0x1404 <DIO_u8GetPortValue+0x50>
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	61 f0       	breq	.+24     	; 0x141a <DIO_u8GetPortValue+0x66>
    1402:	28 c0       	rjmp	.+80     	; 0x1454 <DIO_u8GetPortValue+0xa0>
    1404:	2d 81       	ldd	r18, Y+5	; 0x05
    1406:	3e 81       	ldd	r19, Y+6	; 0x06
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	a1 f0       	breq	.+40     	; 0x1436 <DIO_u8GetPortValue+0x82>
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	b1 f0       	breq	.+44     	; 0x1444 <DIO_u8GetPortValue+0x90>
    1418:	1d c0       	rjmp	.+58     	; 0x1454 <DIO_u8GetPortValue+0xa0>
		{
			case DIO_u8_PORTA :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINA_REG);
    141a:	e9 e3       	ldi	r30, 0x39	; 57
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	80 83       	st	Z, r24
    1426:	16 c0       	rjmp	.+44     	; 0x1454 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTB :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINB_REG);
    1428:	e6 e3       	ldi	r30, 0x36	; 54
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	eb 81       	ldd	r30, Y+3	; 0x03
    1430:	fc 81       	ldd	r31, Y+4	; 0x04
    1432:	80 83       	st	Z, r24
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTC :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINC_REG);
    1436:	e3 e3       	ldi	r30, 0x33	; 51
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	eb 81       	ldd	r30, Y+3	; 0x03
    143e:	fc 81       	ldd	r31, Y+4	; 0x04
    1440:	80 83       	st	Z, r24
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTD :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PIND_REG);
    1444:	e0 e3       	ldi	r30, 0x30	; 48
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	eb 81       	ldd	r30, Y+3	; 0x03
    144c:	fc 81       	ldd	r31, Y+4	; 0x04
    144e:	80 83       	st	Z, r24
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <DIO_u8GetPortValue+0xa0>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
    1452:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
}
    1456:	26 96       	adiw	r28, 0x06	; 6
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <GI_voidEnable>:
#include"GI_interface.h"
#include"GI_private.h"
#include"GI_config.h"

void  GI_voidEnable    (void)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_U8_SREG_REG,GI_U8_BIT_NUMBER);
    1470:	af e5       	ldi	r26, 0x5F	; 95
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ef e5       	ldi	r30, 0x5F	; 95
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	8c 93       	st	X, r24
	
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <GI_voidDisable>:
void  GI_voidDisable   (void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_U8_SREG_REG,GI_U8_BIT_NUMBER);
    148c:	af e5       	ldi	r26, 0x5F	; 95
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ef e5       	ldi	r30, 0x5F	; 95
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8f 77       	andi	r24, 0x7F	; 127
    1498:	8c 93       	st	X, r24
	
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <LCD_voidInit>:
#include"LCD_config.h"



void LCD_voidInit       (void)
{
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	cc 54       	subi	r28, 0x4C	; 76
    14ae:	d0 40       	sbci	r29, 0x00	; 0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	fe 01       	movw	r30, r28
    14bc:	e7 5b       	subi	r30, 0xB7	; 183
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	ac e0       	ldi	r26, 0x0C	; 12
    14c6:	b2 e4       	ldi	r27, 0x42	; 66
    14c8:	80 83       	st	Z, r24
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	a2 83       	std	Z+2, r26	; 0x02
    14ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	8e 01       	movw	r16, r28
    14d2:	0b 5b       	subi	r16, 0xBB	; 187
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	e7 5b       	subi	r30, 0xB7	; 183
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	4a ef       	ldi	r20, 0xFA	; 250
    14ea:	54 e4       	ldi	r21, 0x44	; 68
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	f8 01       	movw	r30, r16
    14f6:	80 83       	st	Z, r24
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	a2 83       	std	Z+2, r26	; 0x02
    14fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14fe:	fe 01       	movw	r30, r28
    1500:	eb 5b       	subi	r30, 0xBB	; 187
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	44 f4       	brge	.+16     	; 0x152c <LCD_voidInit+0x8c>
		__ticks = 1;
    151c:	fe 01       	movw	r30, r28
    151e:	ed 5b       	subi	r30, 0xBD	; 189
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
    152a:	64 c0       	rjmp	.+200    	; 0x15f4 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    152c:	fe 01       	movw	r30, r28
    152e:	eb 5b       	subi	r30, 0xBB	; 187
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	0c f0       	brlt	.+2      	; 0x154c <LCD_voidInit+0xac>
    154a:	43 c0       	rjmp	.+134    	; 0x15d2 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	fe 01       	movw	r30, r28
    154e:	e7 5b       	subi	r30, 0xB7	; 183
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	51 e4       	ldi	r21, 0x41	; 65
    1562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	8e 01       	movw	r16, r28
    156c:	0d 5b       	subi	r16, 0xBD	; 189
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	f8 01       	movw	r30, r16
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
    1582:	1f c0       	rjmp	.+62     	; 0x15c2 <LCD_voidInit+0x122>
    1584:	fe 01       	movw	r30, r28
    1586:	ef 5b       	subi	r30, 0xBF	; 191
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	88 ec       	ldi	r24, 0xC8	; 200
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1592:	fe 01       	movw	r30, r28
    1594:	ef 5b       	subi	r30, 0xBF	; 191
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCD_voidInit+0xfc>
    15a0:	fe 01       	movw	r30, r28
    15a2:	ef 5b       	subi	r30, 0xBF	; 191
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	de 01       	movw	r26, r28
    15ac:	ad 5b       	subi	r26, 0xBD	; 189
    15ae:	bf 4f       	sbci	r27, 0xFF	; 255
    15b0:	fe 01       	movw	r30, r28
    15b2:	ed 5b       	subi	r30, 0xBD	; 189
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	9c 93       	st	X, r25
    15c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	fe 01       	movw	r30, r28
    15c4:	ed 5b       	subi	r30, 0xBD	; 189
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	d1 f6       	brne	.-76     	; 0x1584 <LCD_voidInit+0xe4>
    15d0:	24 c0       	rjmp	.+72     	; 0x161a <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	8e 01       	movw	r16, r28
    15d4:	0d 5b       	subi	r16, 0xBD	; 189
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	fe 01       	movw	r30, r28
    15da:	eb 5b       	subi	r30, 0xBB	; 187
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	f8 01       	movw	r30, r16
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
    15f4:	fe 01       	movw	r30, r28
    15f6:	ed 5b       	subi	r30, 0xBD	; 189
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	fe 01       	movw	r30, r28
    1600:	ff 96       	adiw	r30, 0x3f	; 63
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	fe 01       	movw	r30, r28
    1608:	ff 96       	adiw	r30, 0x3f	; 63
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <LCD_voidInit+0x16e>
    1612:	fe 01       	movw	r30, r28
    1614:	ff 96       	adiw	r30, 0x3f	; 63
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	80 83       	st	Z, r24
	_delay_ms(35);
#if  LCD_U8_MODE== LCD_U8_8_BIT_MODE
	/*send cmnd */
	LCD_voidSendCmnd(0b00111000);
    161a:	88 e3       	ldi	r24, 0x38	; 56
    161c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LCD_voidSendCmnd>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a4 e3       	ldi	r26, 0x34	; 52
    1626:	b2 e4       	ldi	r27, 0x42	; 66
    1628:	8b af       	std	Y+59, r24	; 0x3b
    162a:	9c af       	std	Y+60, r25	; 0x3c
    162c:	ad af       	std	Y+61, r26	; 0x3d
    162e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1630:	6b ad       	ldd	r22, Y+59	; 0x3b
    1632:	7c ad       	ldd	r23, Y+60	; 0x3c
    1634:	8d ad       	ldd	r24, Y+61	; 0x3d
    1636:	9e ad       	ldd	r25, Y+62	; 0x3e
    1638:	2b ea       	ldi	r18, 0xAB	; 171
    163a:	3a ea       	ldi	r19, 0xAA	; 170
    163c:	4a e2       	ldi	r20, 0x2A	; 42
    163e:	50 e4       	ldi	r21, 0x40	; 64
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8f ab       	std	Y+55, r24	; 0x37
    164a:	98 af       	std	Y+56, r25	; 0x38
    164c:	a9 af       	std	Y+57, r26	; 0x39
    164e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1650:	6f a9       	ldd	r22, Y+55	; 0x37
    1652:	78 ad       	ldd	r23, Y+56	; 0x38
    1654:	89 ad       	ldd	r24, Y+57	; 0x39
    1656:	9a ad       	ldd	r25, Y+58	; 0x3a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	1c f4       	brge	.+6      	; 0x166e <LCD_voidInit+0x1ce>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	8e ab       	std	Y+54, r24	; 0x36
    166c:	91 c0       	rjmp	.+290    	; 0x1790 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    166e:	6f a9       	ldd	r22, Y+55	; 0x37
    1670:	78 ad       	ldd	r23, Y+56	; 0x38
    1672:	89 ad       	ldd	r24, Y+57	; 0x39
    1674:	9a ad       	ldd	r25, Y+58	; 0x3a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	53 e4       	ldi	r21, 0x43	; 67
    167e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	0c f0       	brlt	.+2      	; 0x1688 <LCD_voidInit+0x1e8>
    1686:	7b c0       	rjmp	.+246    	; 0x177e <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1688:	6b ad       	ldd	r22, Y+59	; 0x3b
    168a:	7c ad       	ldd	r23, Y+60	; 0x3c
    168c:	8d ad       	ldd	r24, Y+61	; 0x3d
    168e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a e7       	ldi	r20, 0x7A	; 122
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8a ab       	std	Y+50, r24	; 0x32
    16a2:	9b ab       	std	Y+51, r25	; 0x33
    16a4:	ac ab       	std	Y+52, r26	; 0x34
    16a6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a8:	6a a9       	ldd	r22, Y+50	; 0x32
    16aa:	7b a9       	ldd	r23, Y+51	; 0x33
    16ac:	8c a9       	ldd	r24, Y+52	; 0x34
    16ae:	9d a9       	ldd	r25, Y+53	; 0x35
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a ef       	ldi	r20, 0xFA	; 250
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	8e a7       	std	Y+46, r24	; 0x2e
    16c2:	9f a7       	std	Y+47, r25	; 0x2f
    16c4:	a8 ab       	std	Y+48, r26	; 0x30
    16c6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    16c8:	6e a5       	ldd	r22, Y+46	; 0x2e
    16ca:	7f a5       	ldd	r23, Y+47	; 0x2f
    16cc:	88 a9       	ldd	r24, Y+48	; 0x30
    16ce:	99 a9       	ldd	r25, Y+49	; 0x31
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e8       	ldi	r20, 0x80	; 128
    16d6:	5f e3       	ldi	r21, 0x3F	; 63
    16d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16dc:	88 23       	and	r24, r24
    16de:	2c f4       	brge	.+10     	; 0x16ea <LCD_voidInit+0x24a>
		__ticks = 1;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	9d a7       	std	Y+45, r25	; 0x2d
    16e6:	8c a7       	std	Y+44, r24	; 0x2c
    16e8:	3f c0       	rjmp	.+126    	; 0x1768 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    16ea:	6e a5       	ldd	r22, Y+46	; 0x2e
    16ec:	7f a5       	ldd	r23, Y+47	; 0x2f
    16ee:	88 a9       	ldd	r24, Y+48	; 0x30
    16f0:	99 a9       	ldd	r25, Y+49	; 0x31
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	4f e7       	ldi	r20, 0x7F	; 127
    16f8:	57 e4       	ldi	r21, 0x47	; 71
    16fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16fe:	18 16       	cp	r1, r24
    1700:	4c f5       	brge	.+82     	; 0x1754 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1702:	6a a9       	ldd	r22, Y+50	; 0x32
    1704:	7b a9       	ldd	r23, Y+51	; 0x33
    1706:	8c a9       	ldd	r24, Y+52	; 0x34
    1708:	9d a9       	ldd	r25, Y+53	; 0x35
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9d a7       	std	Y+45, r25	; 0x2d
    1728:	8c a7       	std	Y+44, r24	; 0x2c
    172a:	0f c0       	rjmp	.+30     	; 0x174a <LCD_voidInit+0x2aa>
    172c:	88 ec       	ldi	r24, 0xC8	; 200
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9b a7       	std	Y+43, r25	; 0x2b
    1732:	8a a7       	std	Y+42, r24	; 0x2a
    1734:	8a a5       	ldd	r24, Y+42	; 0x2a
    1736:	9b a5       	ldd	r25, Y+43	; 0x2b
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <LCD_voidInit+0x298>
    173c:	9b a7       	std	Y+43, r25	; 0x2b
    173e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1740:	8c a5       	ldd	r24, Y+44	; 0x2c
    1742:	9d a5       	ldd	r25, Y+45	; 0x2d
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	9d a7       	std	Y+45, r25	; 0x2d
    1748:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174a:	8c a5       	ldd	r24, Y+44	; 0x2c
    174c:	9d a5       	ldd	r25, Y+45	; 0x2d
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	69 f7       	brne	.-38     	; 0x172c <LCD_voidInit+0x28c>
    1752:	24 c0       	rjmp	.+72     	; 0x179c <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1754:	6e a5       	ldd	r22, Y+46	; 0x2e
    1756:	7f a5       	ldd	r23, Y+47	; 0x2f
    1758:	88 a9       	ldd	r24, Y+48	; 0x30
    175a:	99 a9       	ldd	r25, Y+49	; 0x31
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9d a7       	std	Y+45, r25	; 0x2d
    1766:	8c a7       	std	Y+44, r24	; 0x2c
    1768:	8c a5       	ldd	r24, Y+44	; 0x2c
    176a:	9d a5       	ldd	r25, Y+45	; 0x2d
    176c:	99 a7       	std	Y+41, r25	; 0x29
    176e:	88 a7       	std	Y+40, r24	; 0x28
    1770:	88 a5       	ldd	r24, Y+40	; 0x28
    1772:	99 a5       	ldd	r25, Y+41	; 0x29
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <LCD_voidInit+0x2d4>
    1778:	99 a7       	std	Y+41, r25	; 0x29
    177a:	88 a7       	std	Y+40, r24	; 0x28
    177c:	0f c0       	rjmp	.+30     	; 0x179c <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    177e:	6f a9       	ldd	r22, Y+55	; 0x37
    1780:	78 ad       	ldd	r23, Y+56	; 0x38
    1782:	89 ad       	ldd	r24, Y+57	; 0x39
    1784:	9a ad       	ldd	r25, Y+58	; 0x3a
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8e ab       	std	Y+54, r24	; 0x36
    1790:	8e a9       	ldd	r24, Y+54	; 0x36
    1792:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1794:	8f a1       	ldd	r24, Y+39	; 0x27
    1796:	8a 95       	dec	r24
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_voidInit+0x2f6>
    179a:	8f a3       	std	Y+39, r24	; 0x27
	LCD_voidSendCmnd(0b00101000);
	
#endif
	_delay_us(45);
	/*display on /off control*/
	LCD_voidSendCmnd(0b00001111);/*display on , blink on, cursor on */
    179c:	8f e0       	ldi	r24, 0x0F	; 15
    179e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LCD_voidSendCmnd>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a4 e3       	ldi	r26, 0x34	; 52
    17a8:	b2 e4       	ldi	r27, 0x42	; 66
    17aa:	8b a3       	std	Y+35, r24	; 0x23
    17ac:	9c a3       	std	Y+36, r25	; 0x24
    17ae:	ad a3       	std	Y+37, r26	; 0x25
    17b0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17b2:	6b a1       	ldd	r22, Y+35	; 0x23
    17b4:	7c a1       	ldd	r23, Y+36	; 0x24
    17b6:	8d a1       	ldd	r24, Y+37	; 0x25
    17b8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ba:	2b ea       	ldi	r18, 0xAB	; 171
    17bc:	3a ea       	ldi	r19, 0xAA	; 170
    17be:	4a e2       	ldi	r20, 0x2A	; 42
    17c0:	50 e4       	ldi	r21, 0x40	; 64
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8f 8f       	std	Y+31, r24	; 0x1f
    17cc:	98 a3       	std	Y+32, r25	; 0x20
    17ce:	a9 a3       	std	Y+33, r26	; 0x21
    17d0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    17d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17d4:	78 a1       	ldd	r23, Y+32	; 0x20
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	1c f4       	brge	.+6      	; 0x17f0 <LCD_voidInit+0x350>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	8e 8f       	std	Y+30, r24	; 0x1e
    17ee:	91 c0       	rjmp	.+290    	; 0x1912 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    17f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17f2:	78 a1       	ldd	r23, Y+32	; 0x20
    17f4:	89 a1       	ldd	r24, Y+33	; 0x21
    17f6:	9a a1       	ldd	r25, Y+34	; 0x22
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	53 e4       	ldi	r21, 0x43	; 67
    1800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1804:	18 16       	cp	r1, r24
    1806:	0c f0       	brlt	.+2      	; 0x180a <LCD_voidInit+0x36a>
    1808:	7b c0       	rjmp	.+246    	; 0x1900 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    180a:	6b a1       	ldd	r22, Y+35	; 0x23
    180c:	7c a1       	ldd	r23, Y+36	; 0x24
    180e:	8d a1       	ldd	r24, Y+37	; 0x25
    1810:	9e a1       	ldd	r25, Y+38	; 0x26
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	54 e4       	ldi	r21, 0x44	; 68
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8a 8f       	std	Y+26, r24	; 0x1a
    1824:	9b 8f       	std	Y+27, r25	; 0x1b
    1826:	ac 8f       	std	Y+28, r26	; 0x1c
    1828:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    182c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    182e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1830:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a ef       	ldi	r20, 0xFA	; 250
    1838:	54 e4       	ldi	r21, 0x44	; 68
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e 8b       	std	Y+22, r24	; 0x16
    1844:	9f 8b       	std	Y+23, r25	; 0x17
    1846:	a8 8f       	std	Y+24, r26	; 0x18
    1848:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    184a:	6e 89       	ldd	r22, Y+22	; 0x16
    184c:	7f 89       	ldd	r23, Y+23	; 0x17
    184e:	88 8d       	ldd	r24, Y+24	; 0x18
    1850:	99 8d       	ldd	r25, Y+25	; 0x19
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <LCD_voidInit+0x3cc>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9d 8b       	std	Y+21, r25	; 0x15
    1868:	8c 8b       	std	Y+20, r24	; 0x14
    186a:	3f c0       	rjmp	.+126    	; 0x18ea <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    186c:	6e 89       	ldd	r22, Y+22	; 0x16
    186e:	7f 89       	ldd	r23, Y+23	; 0x17
    1870:	88 8d       	ldd	r24, Y+24	; 0x18
    1872:	99 8d       	ldd	r25, Y+25	; 0x19
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	4c f5       	brge	.+82     	; 0x18d6 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1886:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1888:	8c 8d       	ldd	r24, Y+28	; 0x1c
    188a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9d 8b       	std	Y+21, r25	; 0x15
    18aa:	8c 8b       	std	Y+20, r24	; 0x14
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <LCD_voidInit+0x42c>
    18ae:	88 ec       	ldi	r24, 0xC8	; 200
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9b 8b       	std	Y+19, r25	; 0x13
    18b4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b6:	8a 89       	ldd	r24, Y+18	; 0x12
    18b8:	9b 89       	ldd	r25, Y+19	; 0x13
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_voidInit+0x41a>
    18be:	9b 8b       	std	Y+19, r25	; 0x13
    18c0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c2:	8c 89       	ldd	r24, Y+20	; 0x14
    18c4:	9d 89       	ldd	r25, Y+21	; 0x15
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	9d 8b       	std	Y+21, r25	; 0x15
    18ca:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	8c 89       	ldd	r24, Y+20	; 0x14
    18ce:	9d 89       	ldd	r25, Y+21	; 0x15
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f7       	brne	.-38     	; 0x18ae <LCD_voidInit+0x40e>
    18d4:	24 c0       	rjmp	.+72     	; 0x191e <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	6e 89       	ldd	r22, Y+22	; 0x16
    18d8:	7f 89       	ldd	r23, Y+23	; 0x17
    18da:	88 8d       	ldd	r24, Y+24	; 0x18
    18dc:	99 8d       	ldd	r25, Y+25	; 0x19
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9d 8b       	std	Y+21, r25	; 0x15
    18e8:	8c 8b       	std	Y+20, r24	; 0x14
    18ea:	8c 89       	ldd	r24, Y+20	; 0x14
    18ec:	9d 89       	ldd	r25, Y+21	; 0x15
    18ee:	99 8b       	std	Y+17, r25	; 0x11
    18f0:	88 8b       	std	Y+16, r24	; 0x10
    18f2:	88 89       	ldd	r24, Y+16	; 0x10
    18f4:	99 89       	ldd	r25, Y+17	; 0x11
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_voidInit+0x456>
    18fa:	99 8b       	std	Y+17, r25	; 0x11
    18fc:	88 8b       	std	Y+16, r24	; 0x10
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1900:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1902:	78 a1       	ldd	r23, Y+32	; 0x20
    1904:	89 a1       	ldd	r24, Y+33	; 0x21
    1906:	9a a1       	ldd	r25, Y+34	; 0x22
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8e 8f       	std	Y+30, r24	; 0x1e
    1912:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1914:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1916:	8f 85       	ldd	r24, Y+15	; 0x0f
    1918:	8a 95       	dec	r24
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_voidInit+0x478>
    191c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	LCD_voidSendCmnd(0b00000001);/*clear display*/
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LCD_voidSendCmnd>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e4       	ldi	r27, 0x40	; 64
    192c:	8b 87       	std	Y+11, r24	; 0x0b
    192e:	9c 87       	std	Y+12, r25	; 0x0c
    1930:	ad 87       	std	Y+13, r26	; 0x0d
    1932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1934:	6b 85       	ldd	r22, Y+11	; 0x0b
    1936:	7c 85       	ldd	r23, Y+12	; 0x0c
    1938:	8d 85       	ldd	r24, Y+13	; 0x0d
    193a:	9e 85       	ldd	r25, Y+14	; 0x0e
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a ef       	ldi	r20, 0xFA	; 250
    1942:	54 e4       	ldi	r21, 0x44	; 68
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8f 83       	std	Y+7, r24	; 0x07
    194e:	98 87       	std	Y+8, r25	; 0x08
    1950:	a9 87       	std	Y+9, r26	; 0x09
    1952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	2c f4       	brge	.+10     	; 0x1976 <LCD_voidInit+0x4d6>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	57 e4       	ldi	r21, 0x47	; 71
    1986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	4c f5       	brge	.+82     	; 0x19e0 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1990:	7c 85       	ldd	r23, Y+12	; 0x0c
    1992:	8d 85       	ldd	r24, Y+13	; 0x0d
    1994:	9e 85       	ldd	r25, Y+14	; 0x0e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <LCD_voidInit+0x536>
    19b8:	88 ec       	ldi	r24, 0xC8	; 200
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_voidInit+0x524>
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <LCD_voidInit+0x518>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e0:	6f 81       	ldd	r22, Y+7	; 0x07
    19e2:	78 85       	ldd	r23, Y+8	; 0x08
    19e4:	89 85       	ldd	r24, Y+9	; 0x09
    19e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_voidInit+0x560>
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*entry mode set*/
	LCD_voidSendCmnd(0b00000110);
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LCD_voidSendCmnd>

}
    1a0e:	c4 5b       	subi	r28, 0xB4	; 180
    1a10:	df 4f       	sbci	r29, 0xFF	; 255
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	08 95       	ret

00001a26 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd       (u8 copy_u8Cmnd)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	6d 97       	sbiw	r28, 0x1d	; 29
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	8d 8f       	std	Y+29, r24	; 0x1d
#if  LCD_U8_MODE== LCD_U8_8_BIT_MODE
	/*RS =0,R/W =0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN ,LOW);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN ,LOW);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
	/*write cmnd on date pins*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,copy_u8Cmnd);
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a54:	0e 94 8f 09 	call	0x131e	; 0x131e <DIO_u8SetPortValue>
	/*enable pulse*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,HIGH);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	62 e0       	ldi	r22, 0x02	; 2
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e8       	ldi	r26, 0x80	; 128
    1a68:	bf e3       	ldi	r27, 0x3F	; 63
    1a6a:	89 8f       	std	Y+25, r24	; 0x19
    1a6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	69 8d       	ldd	r22, Y+25	; 0x19
    1a74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8d 8b       	std	Y+21, r24	; 0x15
    1a8c:	9e 8b       	std	Y+22, r25	; 0x16
    1a8e:	af 8b       	std	Y+23, r26	; 0x17
    1a90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a92:	6d 89       	ldd	r22, Y+21	; 0x15
    1a94:	7e 89       	ldd	r23, Y+22	; 0x16
    1a96:	8f 89       	ldd	r24, Y+23	; 0x17
    1a98:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <LCD_voidSendCmnd+0x8e>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <LCD_voidSendCmnd+0x10c>
	else if (__tmp > 65535)
    1ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aba:	98 8d       	ldd	r25, Y+24	; 0x18
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <LCD_voidSendCmnd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9c 8b       	std	Y+20, r25	; 0x14
    1af2:	8b 8b       	std	Y+19, r24	; 0x13
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <LCD_voidSendCmnd+0xee>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
    1afe:	89 89       	ldd	r24, Y+17	; 0x11
    1b00:	9a 89       	ldd	r25, Y+18	; 0x12
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_voidSendCmnd+0xdc>
    1b06:	9a 8b       	std	Y+18, r25	; 0x12
    1b08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9c 8b       	std	Y+20, r25	; 0x14
    1b12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <LCD_voidSendCmnd+0xd0>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <LCD_voidSendCmnd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b20:	7e 89       	ldd	r23, Y+22	; 0x16
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	8b 89       	ldd	r24, Y+19	; 0x13
    1b34:	9c 89       	ldd	r25, Y+20	; 0x14
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f
    1b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3c:	98 89       	ldd	r25, Y+16	; 0x10
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_voidSendCmnd+0x118>
    1b42:	98 8b       	std	Y+16, r25	; 0x10
    1b44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,LOW);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	8b 87       	std	Y+11, r24	; 0x0b
    1b5a:	9c 87       	std	Y+12, r25	; 0x0c
    1b5c:	ad 87       	std	Y+13, r26	; 0x0d
    1b5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8f 83       	std	Y+7, r24	; 0x07
    1b7a:	98 87       	std	Y+8, r25	; 0x08
    1b7c:	a9 87       	std	Y+9, r26	; 0x09
    1b7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_voidSendCmnd+0x17c>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_voidSendCmnd+0x1fa>
	else if (__tmp > 65535)
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_voidSendCmnd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_voidSendCmnd+0x1dc>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_voidSendCmnd+0x1ca>
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_voidSendCmnd+0x1be>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_voidSendCmnd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_voidSendCmnd+0x206>
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,LOW);
	_delay_ms(1);	
#endif
	
	
}   
    1c34:	6d 96       	adiw	r28, 0x1d	; 29
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <LCD_voidSendChar>:
void LCD_voidSendChar   (u8 copy_u8Char)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	6d 97       	sbiw	r28, 0x1d	; 29
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	8d 8f       	std	Y+29, r24	; 0x1d
#if  LCD_U8_MODE== LCD_U8_8_BIT_MODE
	/*RS =1,R/W =0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,HIGH);
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,LOW);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
	/*write cmnd on date pins*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,copy_u8Char);
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c74:	0e 94 8f 09 	call	0x131e	; 0x131e <DIO_u8SetPortValue>
	/*enable pulse*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,HIGH);
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	89 8f       	std	Y+25, r24	; 0x19
    1c8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	69 8d       	ldd	r22, Y+25	; 0x19
    1c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8d 8b       	std	Y+21, r24	; 0x15
    1cac:	9e 8b       	std	Y+22, r25	; 0x16
    1cae:	af 8b       	std	Y+23, r26	; 0x17
    1cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 8b       	std	Y+20, r25	; 0x14
    1cd0:	8b 8b       	std	Y+19, r24	; 0x13
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cda:	98 8d       	ldd	r25, Y+24	; 0x18
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	69 8d       	ldd	r22, Y+25	; 0x19
    1cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_voidSendChar+0xee>
    1d16:	88 ec       	ldi	r24, 0xC8	; 200
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9a 8b       	std	Y+18, r25	; 0x12
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
    1d1e:	89 89       	ldd	r24, Y+17	; 0x11
    1d20:	9a 89       	ldd	r25, Y+18	; 0x12
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_voidSendChar+0xdc>
    1d26:	9a 8b       	std	Y+18, r25	; 0x12
    1d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_voidSendChar+0xd0>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d40:	7e 89       	ldd	r23, Y+22	; 0x16
    1d42:	8f 89       	ldd	r24, Y+23	; 0x17
    1d44:	98 8d       	ldd	r25, Y+24	; 0x18
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	98 8b       	std	Y+16, r25	; 0x10
    1d58:	8f 87       	std	Y+15, r24	; 0x0f
    1d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5c:	98 89       	ldd	r25, Y+16	; 0x10
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_voidSendChar+0x118>
    1d62:	98 8b       	std	Y+16, r25	; 0x10
    1d64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,LOW);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	62 e0       	ldi	r22, 0x02	; 2
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8SetPinValue>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 e8       	ldi	r26, 0x80	; 128
    1d76:	bf e3       	ldi	r27, 0x3F	; 63
    1d78:	8b 87       	std	Y+11, r24	; 0x0b
    1d7a:	9c 87       	std	Y+12, r25	; 0x0c
    1d7c:	ad 87       	std	Y+13, r26	; 0x0d
    1d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	a9 87       	std	Y+9, r26	; 0x09
    1d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <LCD_voidSendChar+0x17c>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <LCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <LCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <LCD_voidSendChar+0x1dc>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_voidSendChar+0x1ca>
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <LCD_voidSendChar+0x1be>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <LCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_voidSendChar+0x206>
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,HIGH);
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,LOW);
	_delay_ms(1);	
#endif
}
    1e54:	6d 96       	adiw	r28, 0x1d	; 29
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <LCD_voidGoToXY>:


void LCD_voidGoToXY     (u8 copy_u8Line,u8 copy_u8Col)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <LCD_voidGoToXY+0x6>
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <LCD_voidGoToXY+0x8>
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8Line)
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	3c 83       	std	Y+4, r19	; 0x04
    1e7e:	2b 83       	std	Y+3, r18	; 0x03
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	91 05       	cpc	r25, r1
    1e88:	31 f0       	breq	.+12     	; 0x1e96 <LCD_voidGoToXY+0x30>
    1e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8e:	22 30       	cpi	r18, 0x02	; 2
    1e90:	31 05       	cpc	r19, r1
    1e92:	31 f0       	breq	.+12     	; 0x1ea0 <LCD_voidGoToXY+0x3a>
    1e94:	09 c0       	rjmp	.+18     	; 0x1ea8 <LCD_voidGoToXY+0x42>
	{
		case LCD_U8_LINE1 :
		   LCD_voidSendCmnd(0x80 + copy_u8Col);
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	80 58       	subi	r24, 0x80	; 128
    1e9a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LCD_voidSendCmnd>
    1e9e:	04 c0       	rjmp	.+8      	; 0x1ea8 <LCD_voidGoToXY+0x42>
		break;
		case LCD_U8_LINE2 :
		   LCD_voidSendCmnd(0xc0 + copy_u8Col);
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	80 54       	subi	r24, 0x40	; 64
    1ea4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LCD_voidSendCmnd>
		break;		
	}
	
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <LCD_voidClear>:

void LCD_voidClear      (void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	
	 LCD_voidSendCmnd(0x01);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LCD_voidSendCmnd>
	
	
}
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <LCD_voidSendStr>:
	}
}
#endif

void LCD_voidSendStr        (u8 *copy_u8PSTR)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <LCD_voidSendStr+0x6>
    1ed0:	0f 92       	push	r0
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	9b 83       	std	Y+3, r25	; 0x03
    1ed8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	0e c0       	rjmp	.+28     	; 0x1efa <LCD_voidSendStr+0x30>
	while(copy_u8PSTR[i] !='\0')
	{
		LCD_voidSendChar(copy_u8PSTR[i]);
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	80 81       	ld	r24, Z
    1ef0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidSendChar>
		i++;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	89 83       	std	Y+1, r24	; 0x01
#endif

void LCD_voidSendStr        (u8 *copy_u8PSTR)
{
	u8 i=0;
	while(copy_u8PSTR[i] !='\0')
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	9b 81       	ldd	r25, Y+3	; 0x03
    1f04:	fc 01       	movw	r30, r24
    1f06:	e2 0f       	add	r30, r18
    1f08:	f3 1f       	adc	r31, r19
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 23       	and	r24, r24
    1f0e:	39 f7       	brne	.-50     	; 0x1ede <LCD_voidSendStr+0x14>
		LCD_voidSendChar(copy_u8PSTR[i]);
		i++;

	}

}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <LCD_voidSendNum>:


void LCD_voidSendNum    (u32 copy_u8Num)
{
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	c8 58       	subi	r28, 0x88	; 136
    1f2a:	d0 40       	sbci	r29, 0x00	; 0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	fe 01       	movw	r30, r28
    1f38:	e9 57       	subi	r30, 0x79	; 121
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
	u32 local_s32ArrValue[32],local_s32ArrSwap[32];
	u32 local_u32NumberOfDigits=0;
    1f40:	1e 82       	std	Y+6, r1	; 0x06
    1f42:	1d 82       	std	Y+5, r1	; 0x05
	u32 local_u8Counter1 =0,local_u8Counter2 =0;
    1f44:	1c 82       	std	Y+4, r1	; 0x04
    1f46:	1b 82       	std	Y+3, r1	; 0x03
    1f48:	1a 82       	std	Y+2, r1	; 0x02
    1f4a:	19 82       	std	Y+1, r1	; 0x01
    1f4c:	35 c0       	rjmp	.+106    	; 0x1fb8 <LCD_voidSendNum+0x9c>
	while(copy_u8Num !=0)/*get ascii of each digit*/
	{
		local_u32NumberOfDigits ++;
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
		local_s32ArrValue[local_u8Counter1] = (copy_u8Num % 10) + '0' ;
    1f58:	0b 81       	ldd	r16, Y+3	; 0x03
    1f5a:	1c 81       	ldd	r17, Y+4	; 0x04
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e9 57       	subi	r30, 0x79	; 121
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	2a e0       	ldi	r18, 0x0A	; 10
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	b9 01       	movw	r22, r18
    1f6c:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    1f70:	ac 01       	movw	r20, r24
    1f72:	40 5d       	subi	r20, 0xD0	; 208
    1f74:	5f 4f       	sbci	r21, 0xFF	; 255
    1f76:	98 01       	movw	r18, r16
    1f78:	22 0f       	add	r18, r18
    1f7a:	33 1f       	adc	r19, r19
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	82 0f       	add	r24, r18
    1f82:	93 1f       	adc	r25, r19
    1f84:	fc 01       	movw	r30, r24
    1f86:	36 96       	adiw	r30, 0x06	; 6
    1f88:	51 83       	std	Z+1, r21	; 0x01
    1f8a:	40 83       	st	Z, r20
		copy_u8Num /= 10;
    1f8c:	8e 01       	movw	r16, r28
    1f8e:	09 57       	subi	r16, 0x79	; 121
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
    1f92:	fe 01       	movw	r30, r28
    1f94:	e9 57       	subi	r30, 0x79	; 121
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	2a e0       	ldi	r18, 0x0A	; 10
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	b9 01       	movw	r22, r18
    1fa2:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	f8 01       	movw	r30, r16
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
		local_u8Counter1 ++;
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
void LCD_voidSendNum    (u32 copy_u8Num)
{
	u32 local_s32ArrValue[32],local_s32ArrSwap[32];
	u32 local_u32NumberOfDigits=0;
	u32 local_u8Counter1 =0,local_u8Counter2 =0;
	while(copy_u8Num !=0)/*get ascii of each digit*/
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e9 57       	subi	r30, 0x79	; 121
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	21 f6       	brne	.-120    	; 0x1f4e <LCD_voidSendNum+0x32>
    1fc6:	25 c0       	rjmp	.+74     	; 0x2012 <LCD_voidSendNum+0xf6>

	}
	/*revers local_s32ArrValue */
	while(local_u32NumberOfDigits >0)
	{
		local_s32ArrSwap[local_u8Counter2]= local_s32ArrValue[local_u32NumberOfDigits -1];
    1fc8:	69 81       	ldd	r22, Y+1	; 0x01
    1fca:	7a 81       	ldd	r23, Y+2	; 0x02
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	22 0f       	add	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	ce 01       	movw	r24, r28
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	82 0f       	add	r24, r18
    1fde:	93 1f       	adc	r25, r19
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	36 96       	adiw	r30, 0x06	; 6
    1fe4:	40 81       	ld	r20, Z
    1fe6:	51 81       	ldd	r21, Z+1	; 0x01
    1fe8:	9e 01       	movw	r18, r28
    1fea:	29 5b       	subi	r18, 0xB9	; 185
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	cb 01       	movw	r24, r22
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	f9 01       	movw	r30, r18
    1ff6:	e8 0f       	add	r30, r24
    1ff8:	f9 1f       	adc	r31, r25
    1ffa:	51 83       	std	Z+1, r21	; 0x01
    1ffc:	40 83       	st	Z, r20
		local_u8Counter2 ++;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
		local_u32NumberOfDigits --;
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
		copy_u8Num /= 10;
		local_u8Counter1 ++;

	}
	/*revers local_s32ArrValue */
	while(local_u32NumberOfDigits >0)
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	b9 f6       	brne	.-82     	; 0x1fc8 <LCD_voidSendNum+0xac>
		local_s32ArrSwap[local_u8Counter2]= local_s32ArrValue[local_u32NumberOfDigits -1];
		local_u8Counter2 ++;
		local_u32NumberOfDigits --;
	}

	LCD_voidSendStr(local_s32ArrSwap);
    201a:	ce 01       	movw	r24, r28
    201c:	89 5b       	subi	r24, 0xB9	; 185
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_voidSendStr>



}
    2024:	c8 57       	subi	r28, 0x78	; 120
    2026:	df 4f       	sbci	r29, 0xFF	; 255
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	08 95       	ret

0000203c <LCD_VidWriteNum>:


void LCD_VidWriteNum(u32 Copy_u8Num)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <LCD_VidWriteNum+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <LCD_VidWriteNum+0x8>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <LCD_VidWriteNum+0xa>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u8Num <=9 &&Copy_u8Num >=0)
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	8a 30       	cpi	r24, 0x0A	; 10
    2054:	91 05       	cpc	r25, r1
    2056:	28 f4       	brcc	.+10     	; 0x2062 <LCD_VidWriteNum+0x26>
	{
		LCD_voidSendChar(Copy_u8Num + 48);
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
    205a:	80 5d       	subi	r24, 0xD0	; 208
    205c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidSendChar>
    2060:	6a c0       	rjmp	.+212    	; 0x2136 <LCD_VidWriteNum+0xfa>
	}

	else
	{ u16 i=0;
    2062:	1c 82       	std	Y+4, r1	; 0x04
    2064:	1b 82       	std	Y+3, r1	; 0x03
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_VidWriteNum+0x4a>

	  while(Copy_u8Num%10==0)
	  {
		i++;
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
		Copy_u8Num=Copy_u8Num/10;
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	2a e0       	ldi	r18, 0x0A	; 10
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	b9 01       	movw	r22, r18
    207c:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
	}

	else
	{ u16 i=0;

	  while(Copy_u8Num%10==0)
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	2a e0       	ldi	r18, 0x0A	; 10
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	b9 01       	movw	r22, r18
    2090:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	41 f3       	breq	.-48     	; 0x2068 <LCD_VidWriteNum+0x2c>
	  {
		i++;
		Copy_u8Num=Copy_u8Num/10;
	  }

		u32 Local_u16rev=0;
    2098:	1a 82       	std	Y+2, r1	; 0x02
    209a:	19 82       	std	Y+1, r1	; 0x01
    209c:	22 c0       	rjmp	.+68     	; 0x20e2 <LCD_VidWriteNum+0xa6>
		while(Copy_u8Num>0)
		{
			Local_u16rev=Local_u16rev*10+Copy_u8Num %10;
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	9c 01       	movw	r18, r24
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	c9 01       	movw	r24, r18
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	f9 01       	movw	r30, r18
    20b4:	e8 0f       	add	r30, r24
    20b6:	f9 1f       	adc	r31, r25
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	2a e0       	ldi	r18, 0x0A	; 10
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	b9 01       	movw	r22, r18
    20c2:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    20c6:	8e 0f       	add	r24, r30
    20c8:	9f 1f       	adc	r25, r31
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
			Copy_u8Num=Copy_u8Num/10;
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	2a e0       	ldi	r18, 0x0A	; 10
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	b9 01       	movw	r22, r18
    20d8:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    20dc:	cb 01       	movw	r24, r22
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
		i++;
		Copy_u8Num=Copy_u8Num/10;
	  }

		u32 Local_u16rev=0;
		while(Copy_u8Num>0)
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	d1 f6       	brne	.-76     	; 0x209e <LCD_VidWriteNum+0x62>
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <LCD_VidWriteNum+0xd8>
			Copy_u8Num=Copy_u8Num/10;

		}
		while(Local_u16rev>0)
		{
			LCD_voidSendChar(48+(Local_u16rev % 10));
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	2a e0       	ldi	r18, 0x0A	; 10
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	b9 01       	movw	r22, r18
    20f6:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    20fa:	80 5d       	subi	r24, 0xD0	; 208
    20fc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidSendChar>
			Local_u16rev=Local_u16rev/10;
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	2a e0       	ldi	r18, 0x0A	; 10
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	b9 01       	movw	r22, r18
    210a:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    210e:	cb 01       	movw	r24, r22
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
		{
			Local_u16rev=Local_u16rev*10+Copy_u8Num %10;
			Copy_u8Num=Copy_u8Num/10;

		}
		while(Local_u16rev>0)
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	41 f7       	brne	.-48     	; 0x20ec <LCD_VidWriteNum+0xb0>
    211c:	08 c0       	rjmp	.+16     	; 0x212e <LCD_VidWriteNum+0xf2>
			Local_u16rev=Local_u16rev/10;

		}
		while(i>0)
		{
			LCD_voidSendChar('0');
    211e:	80 e3       	ldi	r24, 0x30	; 48
    2120:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_voidSendChar>
			i--;
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
		{
			LCD_voidSendChar(48+(Local_u16rev % 10));
			Local_u16rev=Local_u16rev/10;

		}
		while(i>0)
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	a1 f7       	brne	.-24     	; 0x211e <LCD_VidWriteNum+0xe2>
			i--;
		}


	}
}
    2136:	26 96       	adiw	r28, 0x06	; 6
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <UART_voidInit>:
/*global pointers to functions*/
static void (*UART_ptrtofun)(void) = NULL;
static void (*UART_ptrtofun2)(void) = NULL;

void UART_voidInit(void)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	UART_u8_UBRR_REG =  51 ;
    2150:	e9 e2       	ldi	r30, 0x29	; 41
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	83 e3       	ldi	r24, 0x33	; 51
    2156:	80 83       	st	Z, r24
	SET_BIT(UART_u8_UCSRB_REG,3);
    2158:	aa e2       	ldi	r26, 0x2A	; 42
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	ea e2       	ldi	r30, 0x2A	; 42
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	88 60       	ori	r24, 0x08	; 8
    2164:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,4);
    2166:	aa e2       	ldi	r26, 0x2A	; 42
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	ea e2       	ldi	r30, 0x2A	; 42
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 61       	ori	r24, 0x10	; 16
    2172:	8c 93       	st	X, r24
	//UART_u8_UCSRC_REG = (1<<7);
	UART_u8_UCSRC_REG = (1<<7) | (1<<1) | (1<<2);
    2174:	e0 e4       	ldi	r30, 0x40	; 64
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	86 e8       	ldi	r24, 0x86	; 134
    217a:	80 83       	st	Z, r24
	
}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <UART_voidTransmit>:

void UART_voidTransmit(u8 copy_u8Data)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UART_u8_UCSRA_REG,5));
    218e:	eb e2       	ldi	r30, 0x2B	; 43
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	82 95       	swap	r24
    2196:	86 95       	lsr	r24
    2198:	87 70       	andi	r24, 0x07	; 7
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	81 70       	andi	r24, 0x01	; 1
    21a0:	90 70       	andi	r25, 0x00	; 0
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	a1 f3       	breq	.-24     	; 0x218e <UART_voidTransmit+0xc>
	UART_u8_UDR_REG = copy_u8Data;
    21a6:	ec e2       	ldi	r30, 0x2C	; 44
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	80 83       	st	Z, r24
	
	
	
}
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <UART_voidRecive>:

u8 UART_voidRecive(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	
	while(!GET_BIT(UART_u8_UCSRA_REG,7));
    21be:	eb e2       	ldi	r30, 0x2B	; 43
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	dc f7       	brge	.-10     	; 0x21be <UART_voidRecive+0x8>

	return UART_u8_UDR_REG;
    21c8:	ec e2       	ldi	r30, 0x2C	; 44
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
	
}
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <UART_voidSendBufferSynch>:


void UART_voidSendBufferSynch(u8 *PtrArr, u8 size)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <UART_voidSendBufferSynch+0x6>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <UART_voidSendBufferSynch+0x8>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9b 83       	std	Y+3, r25	; 0x03
    21e2:	8a 83       	std	Y+2, r24	; 0x02
    21e4:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8Index = 0;
    21e6:	19 82       	std	Y+1, r1	; 0x01
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <UART_voidSendBufferSynch+0x32>
	while(local_u8Index <size)
	{
		UART_voidTransmit(PtrArr[local_u8Index]);
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	fc 01       	movw	r30, r24
    21f6:	e2 0f       	add	r30, r18
    21f8:	f3 1f       	adc	r31, r19
    21fa:	80 81       	ld	r24, Z
    21fc:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_voidTransmit>
		local_u8Index ++;
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	8f 5f       	subi	r24, 0xFF	; 255
    2204:	89 83       	std	Y+1, r24	; 0x01


void UART_voidSendBufferSynch(u8 *PtrArr, u8 size)
{
	u8 local_u8Index = 0;
	while(local_u8Index <size)
    2206:	99 81       	ldd	r25, Y+1	; 0x01
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	98 17       	cp	r25, r24
    220c:	70 f3       	brcs	.-36     	; 0x21ea <UART_voidSendBufferSynch+0x16>
		UART_voidTransmit(PtrArr[local_u8Index]);
		local_u8Index ++;
	}


}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <UART_voidReceiveBufferSynch>:


void UART_voidReceiveBufferSynch(u8 *PtrArr, u8 size)
{
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <UART_voidReceiveBufferSynch+0xa>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <UART_voidReceiveBufferSynch+0xc>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9b 83       	std	Y+3, r25	; 0x03
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8Index = 0;
    2232:	19 82       	std	Y+1, r1	; 0x01
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <UART_voidReceiveBufferSynch+0x38>
	while(local_u8Index <size)
	{
		PtrArr[local_u8Index] = UART_voidRecive();
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	8c 01       	movw	r16, r24
    2242:	02 0f       	add	r16, r18
    2244:	13 1f       	adc	r17, r19
    2246:	0e 94 db 10 	call	0x21b6	; 0x21b6 <UART_voidRecive>
    224a:	f8 01       	movw	r30, r16
    224c:	80 83       	st	Z, r24
		local_u8Index ++;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	89 83       	std	Y+1, r24	; 0x01


void UART_voidReceiveBufferSynch(u8 *PtrArr, u8 size)
{
	u8 local_u8Index = 0;
	while(local_u8Index <size)
    2254:	99 81       	ldd	r25, Y+1	; 0x01
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	98 17       	cp	r25, r24
    225a:	68 f3       	brcs	.-38     	; 0x2236 <UART_voidReceiveBufferSynch+0x1a>
	{
		PtrArr[local_u8Index] = UART_voidRecive();
		local_u8Index ++;
	}

}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	08 95       	ret

0000226e <UART_voidSendBufferAsynch>:




void UART_voidSendBufferAsynch(u8 *PtrArr, u8 size, void (*PFNotification)(void))
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <UART_voidSendBufferAsynch+0x6>
    2274:	00 d0       	rcall	.+0      	; 0x2276 <UART_voidSendBufferAsynch+0x8>
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	6b 83       	std	Y+3, r22	; 0x03
    2282:	5d 83       	std	Y+5, r21	; 0x05
    2284:	4c 83       	std	Y+4, r20	; 0x04

	busy_flag =1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	80 93 71 00 	sts	0x0071, r24
	PtrBuffer = PtrArr;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	90 93 6a 00 	sts	0x006A, r25
    2294:	80 93 69 00 	sts	0x0069, r24
	SIZE = size;
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	80 93 70 00 	sts	0x0070, r24
	UART_ptrtofun = PFNotification;
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	9d 81       	ldd	r25, Y+5	; 0x05
    22a2:	90 93 6c 00 	sts	0x006C, r25
    22a6:	80 93 6b 00 	sts	0x006B, r24
	GI_voidEnable();
    22aa:	0e 94 34 0a 	call	0x1468	; 0x1468 <GI_voidEnable>
	/*send first byte*/
	while(!GET_BIT(UART_u8_UCSRA_REG,5));
    22ae:	eb e2       	ldi	r30, 0x2B	; 43
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	82 95       	swap	r24
    22b6:	86 95       	lsr	r24
    22b8:	87 70       	andi	r24, 0x07	; 7
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	81 70       	andi	r24, 0x01	; 1
    22c0:	90 70       	andi	r25, 0x00	; 0
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	a1 f3       	breq	.-24     	; 0x22ae <UART_voidSendBufferAsynch+0x40>
	UART_u8_UDR_REG = PtrBuffer[INDEX];
    22c6:	ac e2       	ldi	r26, 0x2C	; 44
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	20 91 69 00 	lds	r18, 0x0069
    22ce:	30 91 6a 00 	lds	r19, 0x006A
    22d2:	80 91 68 00 	lds	r24, 0x0068
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	f9 01       	movw	r30, r18
    22dc:	e8 0f       	add	r30, r24
    22de:	f9 1f       	adc	r31, r25
    22e0:	80 81       	ld	r24, Z
    22e2:	8c 93       	st	X, r24

	SET_BIT(UART_u8_UCSRB_REG,5);  /*enable interrupt of empty data register*/
    22e4:	aa e2       	ldi	r26, 0x2A	; 42
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	ea e2       	ldi	r30, 0x2A	; 42
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 62       	ori	r24, 0x20	; 32
    22f0:	8c 93       	st	X, r24

}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <UART_voidReciveBufferAsynch>:

void UART_voidReciveBufferAsynch(u8 *PtrArr, u8 size, void (*PFNotification)(void))
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <UART_voidReciveBufferAsynch+0x6>
    2308:	00 d0       	rcall	.+0      	; 0x230a <UART_voidReciveBufferAsynch+0x8>
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	6b 83       	std	Y+3, r22	; 0x03
    2316:	5d 83       	std	Y+5, r21	; 0x05
    2318:	4c 83       	std	Y+4, r20	; 0x04
	busy_flag =1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 71 00 	sts	0x0071, r24
	SIZE = size;
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	80 93 70 00 	sts	0x0070, r24
	PtrBuffer = PtrArr;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	90 93 6a 00 	sts	0x006A, r25
    232e:	80 93 69 00 	sts	0x0069, r24
	UART_ptrtofun2 = PFNotification;
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	9d 81       	ldd	r25, Y+5	; 0x05
    2336:	90 93 6e 00 	sts	0x006E, r25
    233a:	80 93 6d 00 	sts	0x006D, r24
	GI_voidEnable();
    233e:	0e 94 34 0a 	call	0x1468	; 0x1468 <GI_voidEnable>
	/*receive first byte*/
	while(!GET_BIT(UART_u8_UCSRA_REG,7));
    2342:	eb e2       	ldi	r30, 0x2B	; 43
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	88 23       	and	r24, r24
    234a:	dc f7       	brge	.-10     	; 0x2342 <UART_voidReciveBufferAsynch+0x40>
	PtrBuffer[INDEX] = UART_u8_UDR_REG ;
    234c:	20 91 69 00 	lds	r18, 0x0069
    2350:	30 91 6a 00 	lds	r19, 0x006A
    2354:	80 91 68 00 	lds	r24, 0x0068
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	d9 01       	movw	r26, r18
    235e:	a8 0f       	add	r26, r24
    2360:	b9 1f       	adc	r27, r25
    2362:	ec e2       	ldi	r30, 0x2C	; 44
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	8c 93       	st	X, r24

	SET_BIT(UART_u8_UCSRB_REG,7);  /*enable interrupt of receive byte*/
    236a:	aa e2       	ldi	r26, 0x2A	; 42
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	ea e2       	ldi	r30, 0x2A	; 42
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	80 68       	ori	r24, 0x80	; 128
    2376:	8c 93       	st	X, r24




}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <__vector_12>:


/*ISR function prototype to transmit buffer empty*/
void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    2388:	1f 92       	push	r1
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	0f 92       	push	r0
    2390:	11 24       	eor	r1, r1
    2392:	2f 93       	push	r18
    2394:	3f 93       	push	r19
    2396:	4f 93       	push	r20
    2398:	5f 93       	push	r21
    239a:	6f 93       	push	r22
    239c:	7f 93       	push	r23
    239e:	8f 93       	push	r24
    23a0:	9f 93       	push	r25
    23a2:	af 93       	push	r26
    23a4:	bf 93       	push	r27
    23a6:	ef 93       	push	r30
    23a8:	ff 93       	push	r31
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
	INDEX++;
    23b2:	80 91 68 00 	lds	r24, 0x0068
    23b6:	8f 5f       	subi	r24, 0xFF	; 255
    23b8:	80 93 68 00 	sts	0x0068, r24
	if(INDEX == SIZE )
    23bc:	90 91 68 00 	lds	r25, 0x0068
    23c0:	80 91 70 00 	lds	r24, 0x0070
    23c4:	98 17       	cp	r25, r24
    23c6:	79 f4       	brne	.+30     	; 0x23e6 <__vector_12+0x5e>
	{
		CLR_BIT(UART_u8_UCSRB_REG,5);
    23c8:	aa e2       	ldi	r26, 0x2A	; 42
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ea e2       	ldi	r30, 0x2A	; 42
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 7d       	andi	r24, 0xDF	; 223
    23d4:	8c 93       	st	X, r24
		busy_flag = 0;
    23d6:	10 92 71 00 	sts	0x0071, r1
		UART_ptrtofun();
    23da:	e0 91 6b 00 	lds	r30, 0x006B
    23de:	f0 91 6c 00 	lds	r31, 0x006C
    23e2:	09 95       	icall
    23e4:	1b c0       	rjmp	.+54     	; 0x241c <__vector_12+0x94>
	}
	else
	{
	   while(!GET_BIT(UART_u8_UCSRA_REG,5));
    23e6:	eb e2       	ldi	r30, 0x2B	; 43
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	82 95       	swap	r24
    23ee:	86 95       	lsr	r24
    23f0:	87 70       	andi	r24, 0x07	; 7
    23f2:	88 2f       	mov	r24, r24
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	81 70       	andi	r24, 0x01	; 1
    23f8:	90 70       	andi	r25, 0x00	; 0
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	a1 f3       	breq	.-24     	; 0x23e6 <__vector_12+0x5e>
	   UART_u8_UDR_REG = PtrBuffer[INDEX];
    23fe:	ac e2       	ldi	r26, 0x2C	; 44
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	20 91 69 00 	lds	r18, 0x0069
    2406:	30 91 6a 00 	lds	r19, 0x006A
    240a:	80 91 68 00 	lds	r24, 0x0068
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	f9 01       	movw	r30, r18
    2414:	e8 0f       	add	r30, r24
    2416:	f9 1f       	adc	r31, r25
    2418:	80 81       	ld	r24, Z
    241a:	8c 93       	st	X, r24
	}

}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	ff 91       	pop	r31
    2422:	ef 91       	pop	r30
    2424:	bf 91       	pop	r27
    2426:	af 91       	pop	r26
    2428:	9f 91       	pop	r25
    242a:	8f 91       	pop	r24
    242c:	7f 91       	pop	r23
    242e:	6f 91       	pop	r22
    2430:	5f 91       	pop	r21
    2432:	4f 91       	pop	r20
    2434:	3f 91       	pop	r19
    2436:	2f 91       	pop	r18
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	0f 90       	pop	r0
    243e:	1f 90       	pop	r1
    2440:	18 95       	reti

00002442 <__vector_11>:

/*ISR function prototype to receive complete*/
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2442:	1f 92       	push	r1
    2444:	0f 92       	push	r0
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	0f 92       	push	r0
    244a:	11 24       	eor	r1, r1
    244c:	2f 93       	push	r18
    244e:	3f 93       	push	r19
    2450:	4f 93       	push	r20
    2452:	5f 93       	push	r21
    2454:	6f 93       	push	r22
    2456:	7f 93       	push	r23
    2458:	8f 93       	push	r24
    245a:	9f 93       	push	r25
    245c:	af 93       	push	r26
    245e:	bf 93       	push	r27
    2460:	ef 93       	push	r30
    2462:	ff 93       	push	r31
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
	INDEX++;
    246c:	80 91 68 00 	lds	r24, 0x0068
    2470:	8f 5f       	subi	r24, 0xFF	; 255
    2472:	80 93 68 00 	sts	0x0068, r24
	if(INDEX == SIZE )
    2476:	90 91 68 00 	lds	r25, 0x0068
    247a:	80 91 70 00 	lds	r24, 0x0070
    247e:	98 17       	cp	r25, r24
    2480:	79 f4       	brne	.+30     	; 0x24a0 <__vector_11+0x5e>
	{
		CLR_BIT(UART_u8_UCSRB_REG,7);
    2482:	aa e2       	ldi	r26, 0x2A	; 42
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	ea e2       	ldi	r30, 0x2A	; 42
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	8f 77       	andi	r24, 0x7F	; 127
    248e:	8c 93       	st	X, r24
		busy_flag = 0;
    2490:	10 92 71 00 	sts	0x0071, r1
		UART_ptrtofun2();
    2494:	e0 91 6d 00 	lds	r30, 0x006D
    2498:	f0 91 6e 00 	lds	r31, 0x006E
    249c:	09 95       	icall
    249e:	14 c0       	rjmp	.+40     	; 0x24c8 <__vector_11+0x86>
	}
	else
	{
	   while(!GET_BIT(UART_u8_UCSRA_REG,7));
    24a0:	eb e2       	ldi	r30, 0x2B	; 43
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 23       	and	r24, r24
    24a8:	dc f7       	brge	.-10     	; 0x24a0 <__vector_11+0x5e>
	   PtrBuffer[INDEX] =  UART_u8_UDR_REG ;
    24aa:	20 91 69 00 	lds	r18, 0x0069
    24ae:	30 91 6a 00 	lds	r19, 0x006A
    24b2:	80 91 68 00 	lds	r24, 0x0068
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	d9 01       	movw	r26, r18
    24bc:	a8 0f       	add	r26, r24
    24be:	b9 1f       	adc	r27, r25
    24c0:	ec e2       	ldi	r30, 0x2C	; 44
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8c 93       	st	X, r24
	}


}
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	ff 91       	pop	r31
    24ce:	ef 91       	pop	r30
    24d0:	bf 91       	pop	r27
    24d2:	af 91       	pop	r26
    24d4:	9f 91       	pop	r25
    24d6:	8f 91       	pop	r24
    24d8:	7f 91       	pop	r23
    24da:	6f 91       	pop	r22
    24dc:	5f 91       	pop	r21
    24de:	4f 91       	pop	r20
    24e0:	3f 91       	pop	r19
    24e2:	2f 91       	pop	r18
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	0f 90       	pop	r0
    24ea:	1f 90       	pop	r1
    24ec:	18 95       	reti

000024ee <main>:

void UART_voidEndNotification(void);
volatile u8 End_flag = 0;

int main(void)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	64 97       	sbiw	r28, 0x14	; 20
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
	u8 data[20] ;
	DIO_voidInit();
    2502:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	LCD_voidInit();
    2506:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_voidInit>
	UART_voidInit();
    250a:	0e 94 a4 10 	call	0x2148	; 0x2148 <UART_voidInit>
//	LCD_voidSendChar(data[4]);

//	data = UART_voidRecive();

		//DIO_u8SetPinValue(0,0,HIGH);
	UART_voidReciveBufferAsynch(data,20,UART_voidEndNotification);
    250e:	24 e9       	ldi	r18, 0x94	; 148
    2510:	32 e1       	ldi	r19, 0x12	; 18
    2512:	ce 01       	movw	r24, r28
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	64 e1       	ldi	r22, 0x14	; 20
    2518:	a9 01       	movw	r20, r18
    251a:	0e 94 81 11 	call	0x2302	; 0x2302 <UART_voidReciveBufferAsynch>
    LCD_voidSendStr(data);
    251e:	ce 01       	movw	r24, r28
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_voidSendStr>
    2526:	ff cf       	rjmp	.-2      	; 0x2526 <main+0x38>

00002528 <UART_voidEndNotification>:

}


void UART_voidEndNotification(void)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
	End_flag =1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	80 93 6f 00 	sts	0x006F, r24

}
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <__udivmodhi4>:
    253c:	aa 1b       	sub	r26, r26
    253e:	bb 1b       	sub	r27, r27
    2540:	51 e1       	ldi	r21, 0x11	; 17
    2542:	07 c0       	rjmp	.+14     	; 0x2552 <__udivmodhi4_ep>

00002544 <__udivmodhi4_loop>:
    2544:	aa 1f       	adc	r26, r26
    2546:	bb 1f       	adc	r27, r27
    2548:	a6 17       	cp	r26, r22
    254a:	b7 07       	cpc	r27, r23
    254c:	10 f0       	brcs	.+4      	; 0x2552 <__udivmodhi4_ep>
    254e:	a6 1b       	sub	r26, r22
    2550:	b7 0b       	sbc	r27, r23

00002552 <__udivmodhi4_ep>:
    2552:	88 1f       	adc	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	5a 95       	dec	r21
    2558:	a9 f7       	brne	.-22     	; 0x2544 <__udivmodhi4_loop>
    255a:	80 95       	com	r24
    255c:	90 95       	com	r25
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	08 95       	ret

00002564 <__prologue_saves__>:
    2564:	2f 92       	push	r2
    2566:	3f 92       	push	r3
    2568:	4f 92       	push	r4
    256a:	5f 92       	push	r5
    256c:	6f 92       	push	r6
    256e:	7f 92       	push	r7
    2570:	8f 92       	push	r8
    2572:	9f 92       	push	r9
    2574:	af 92       	push	r10
    2576:	bf 92       	push	r11
    2578:	cf 92       	push	r12
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	ca 1b       	sub	r28, r26
    258e:	db 0b       	sbc	r29, r27
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	09 94       	ijmp

0000259c <__epilogue_restores__>:
    259c:	2a 88       	ldd	r2, Y+18	; 0x12
    259e:	39 88       	ldd	r3, Y+17	; 0x11
    25a0:	48 88       	ldd	r4, Y+16	; 0x10
    25a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    25a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    25a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    25a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    25aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    25ae:	b9 84       	ldd	r11, Y+9	; 0x09
    25b0:	c8 84       	ldd	r12, Y+8	; 0x08
    25b2:	df 80       	ldd	r13, Y+7	; 0x07
    25b4:	ee 80       	ldd	r14, Y+6	; 0x06
    25b6:	fd 80       	ldd	r15, Y+5	; 0x05
    25b8:	0c 81       	ldd	r16, Y+4	; 0x04
    25ba:	1b 81       	ldd	r17, Y+3	; 0x03
    25bc:	aa 81       	ldd	r26, Y+2	; 0x02
    25be:	b9 81       	ldd	r27, Y+1	; 0x01
    25c0:	ce 0f       	add	r28, r30
    25c2:	d1 1d       	adc	r29, r1
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	ed 01       	movw	r28, r26
    25d0:	08 95       	ret

000025d2 <_exit>:
    25d2:	f8 94       	cli

000025d4 <__stop_program>:
    25d4:	ff cf       	rjmp	.-2      	; 0x25d4 <__stop_program>
