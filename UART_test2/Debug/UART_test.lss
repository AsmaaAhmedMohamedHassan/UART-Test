
UART_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d44  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000008ba  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 04 	call	0x8d0	; 0x8d0 <main>
  64:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/*SET PIN DIRECTIONS*/

	DIO_U8_DDRA_REG = conc(DIO_U8_PA7_DIRECTION,DIO_U8_PA6_DIRECTION,DIO_U8_PA5_DIRECTION,DIO_U8_PA4_DIRECTION,
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
	                       DIO_U8_PA3_DIRECTION,DIO_U8_PA2_DIRECTION,DIO_U8_PA1_DIRECTION,DIO_U8_PA0_DIRECTION);

	DIO_U8_DDRB_REG = conc(DIO_U8_PB7_DIRECTION,DIO_U8_PB6_DIRECTION,DIO_U8_PB5_DIRECTION,DIO_U8_PB4_DIRECTION,
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	80 83       	st	Z, r24
	                       DIO_U8_PB3_DIRECTION,DIO_U8_PB2_DIRECTION,DIO_U8_PB1_DIRECTION,DIO_U8_PB0_DIRECTION);

	DIO_U8_DDRC_REG = conc(DIO_U8_PC7_DIRECTION,DIO_U8_PC6_DIRECTION,DIO_U8_PC5_DIRECTION,DIO_U8_PC4_DIRECTION,
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 83       	st	Z, r24
	                       DIO_U8_PC3_DIRECTION,DIO_U8_PC2_DIRECTION,DIO_U8_PC1_DIRECTION,DIO_U8_PC0_DIRECTION);
						   
	DIO_U8_DDRD_REG = conc(DIO_U8_PD7_DIRECTION,DIO_U8_PD6_DIRECTION,DIO_U8_PD5_DIRECTION,DIO_U8_PD4_DIRECTION,
  8c:	e1 e3       	ldi	r30, 0x31	; 49
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8b eb       	ldi	r24, 0xBB	; 187
  92:	80 83       	st	Z, r24
	                       DIO_U8_PD3_DIRECTION,DIO_U8_PD2_DIRECTION,DIO_U8_PD1_DIRECTION,DIO_U8_PD0_DIRECTION);
	/*SET INITIAL VALUES FOR PINS*/   
	DIO_U8_PORTA_REG = conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
  94:	eb e3       	ldi	r30, 0x3B	; 59
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
	                       DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);
                                                                                                                 
	DIO_U8_PORTB_REG = conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
  9a:	e8 e3       	ldi	r30, 0x38	; 56
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	80 83       	st	Z, r24
	                       DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);
						                                                                                         
	DIO_U8_PORTC_REG = conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
  a2:	e5 e3       	ldi	r30, 0x35	; 53
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	                       DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);
						                                                                                         
	DIO_U8_PORTD_REG = conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
  a8:	e2 e3       	ldi	r30, 0x32	; 50
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	                       DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);	
	
						   
						   
						   
}	
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <DIO_u8SetPinDirection>:



u8   DIO_u8SetPinDirection (u8 copy_u8PortId, u8   copy_u8PinId ,u8  copy_u8PinDirection) 
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	00 d0       	rcall	.+0      	; 0xba <DIO_u8SetPinDirection+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <DIO_u8SetPinDirection+0x8>
  bc:	00 d0       	rcall	.+0      	; 0xbe <DIO_u8SetPinDirection+0xa>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	8a 83       	std	Y+2, r24	; 0x02
  c4:	6b 83       	std	Y+3, r22	; 0x03
  c6:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = STD_TYPES_OK ;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_u8_PORTD)&&(copy_u8PinId <= DIO_u8_PIN7)
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	08 f0       	brcs	.+2      	; 0xd4 <DIO_u8SetPinDirection+0x20>
  d2:	dd c0       	rjmp	.+442    	; 0x28e <DIO_u8SetPinDirection+0x1da>
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	08 f0       	brcs	.+2      	; 0xdc <DIO_u8SetPinDirection+0x28>
  da:	d9 c0       	rjmp	.+434    	; 0x28e <DIO_u8SetPinDirection+0x1da>
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	88 23       	and	r24, r24
  e0:	21 f0       	breq	.+8      	; 0xea <DIO_u8SetPinDirection+0x36>
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	09 f0       	breq	.+2      	; 0xea <DIO_u8SetPinDirection+0x36>
  e8:	d2 c0       	rjmp	.+420    	; 0x28e <DIO_u8SetPinDirection+0x1da>
       &&((copy_u8PinDirection == DIO_u8_INPUT)||(copy_u8PinDirection ==DIO_u8_OUTPUT)))
	{
		switch(copy_u8PortId)
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	3e 83       	std	Y+6, r19	; 0x06
  f2:	2d 83       	std	Y+5, r18	; 0x05
  f4:	8d 81       	ldd	r24, Y+5	; 0x05
  f6:	9e 81       	ldd	r25, Y+6	; 0x06
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 05       	cpc	r25, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <DIO_u8SetPinDirection+0x4c>
  fe:	43 c0       	rjmp	.+134    	; 0x186 <DIO_u8SetPinDirection+0xd2>
 100:	2d 81       	ldd	r18, Y+5	; 0x05
 102:	3e 81       	ldd	r19, Y+6	; 0x06
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 05       	cpc	r19, r1
 108:	2c f4       	brge	.+10     	; 0x114 <DIO_u8SetPinDirection+0x60>
 10a:	8d 81       	ldd	r24, Y+5	; 0x05
 10c:	9e 81       	ldd	r25, Y+6	; 0x06
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	71 f0       	breq	.+28     	; 0x12e <DIO_u8SetPinDirection+0x7a>
 112:	be c0       	rjmp	.+380    	; 0x290 <DIO_u8SetPinDirection+0x1dc>
 114:	2d 81       	ldd	r18, Y+5	; 0x05
 116:	3e 81       	ldd	r19, Y+6	; 0x06
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <DIO_u8SetPinDirection+0x6c>
 11e:	5f c0       	rjmp	.+190    	; 0x1de <DIO_u8SetPinDirection+0x12a>
 120:	8d 81       	ldd	r24, Y+5	; 0x05
 122:	9e 81       	ldd	r25, Y+6	; 0x06
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	91 05       	cpc	r25, r1
 128:	09 f4       	brne	.+2      	; 0x12c <DIO_u8SetPinDirection+0x78>
 12a:	85 c0       	rjmp	.+266    	; 0x236 <DIO_u8SetPinDirection+0x182>
 12c:	b1 c0       	rjmp	.+354    	; 0x290 <DIO_u8SetPinDirection+0x1dc>
		{
		  case DIO_u8_PORTA :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	88 23       	and	r24, r24
 132:	a9 f4       	brne	.+42     	; 0x15e <DIO_u8SetPinDirection+0xaa>
			 {
				 CLR_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
 134:	aa e3       	ldi	r26, 0x3A	; 58
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	ea e3       	ldi	r30, 0x3A	; 58
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	48 2f       	mov	r20, r24
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_u8SetPinDirection+0x9e>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_u8SetPinDirection+0x9a>
 156:	80 95       	com	r24
 158:	84 23       	and	r24, r20
 15a:	8c 93       	st	X, r24
 15c:	99 c0       	rjmp	.+306    	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
 15e:	aa e3       	ldi	r26, 0x3A	; 58
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	ea e3       	ldi	r30, 0x3A	; 58
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_u8SetPinDirection+0xc8>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_u8SetPinDirection+0xc4>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	85 c0       	rjmp	.+266    	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 }
		  break;
		  case DIO_u8_PORTB :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	88 23       	and	r24, r24
 18a:	a9 f4       	brne	.+42     	; 0x1b6 <DIO_u8SetPinDirection+0x102>
			 {
				 CLR_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
 18c:	a7 e3       	ldi	r26, 0x37	; 55
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e7 e3       	ldi	r30, 0x37	; 55
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	48 2f       	mov	r20, r24
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 2e       	mov	r0, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_u8SetPinDirection+0xf6>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	0a 94       	dec	r0
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_u8SetPinDirection+0xf2>
 1ae:	80 95       	com	r24
 1b0:	84 23       	and	r24, r20
 1b2:	8c 93       	st	X, r24
 1b4:	6d c0       	rjmp	.+218    	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
 1b6:	a7 e3       	ldi	r26, 0x37	; 55
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e7 e3       	ldi	r30, 0x37	; 55
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_u8SetPinDirection+0x120>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_u8SetPinDirection+0x11c>
 1d8:	84 2b       	or	r24, r20
 1da:	8c 93       	st	X, r24
 1dc:	59 c0       	rjmp	.+178    	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 }
		  break;
		  case DIO_u8_PORTC :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
 1de:	8c 81       	ldd	r24, Y+4	; 0x04
 1e0:	88 23       	and	r24, r24
 1e2:	a9 f4       	brne	.+42     	; 0x20e <DIO_u8SetPinDirection+0x15a>
			 {
				 CLR_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
 1e4:	a4 e3       	ldi	r26, 0x34	; 52
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e4 e3       	ldi	r30, 0x34	; 52
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	48 2f       	mov	r20, r24
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 2e       	mov	r0, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_u8SetPinDirection+0x14e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_u8SetPinDirection+0x14a>
 206:	80 95       	com	r24
 208:	84 23       	and	r24, r20
 20a:	8c 93       	st	X, r24
 20c:	41 c0       	rjmp	.+130    	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
 20e:	a4 e3       	ldi	r26, 0x34	; 52
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e4 e3       	ldi	r30, 0x34	; 52
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	48 2f       	mov	r20, r24
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_u8SetPinDirection+0x178>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_u8SetPinDirection+0x174>
 230:	84 2b       	or	r24, r20
 232:	8c 93       	st	X, r24
 234:	2d c0       	rjmp	.+90     	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 }
		 break;
		 case DIO_u8_PORTD :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
 236:	8c 81       	ldd	r24, Y+4	; 0x04
 238:	88 23       	and	r24, r24
 23a:	a9 f4       	brne	.+42     	; 0x266 <DIO_u8SetPinDirection+0x1b2>
			 {
				 CLR_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
 23c:	a1 e3       	ldi	r26, 0x31	; 49
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e1 e3       	ldi	r30, 0x31	; 49
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	48 2f       	mov	r20, r24
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 2e       	mov	r0, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_u8SetPinDirection+0x1a6>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_u8SetPinDirection+0x1a2>
 25e:	80 95       	com	r24
 260:	84 23       	and	r24, r20
 262:	8c 93       	st	X, r24
 264:	15 c0       	rjmp	.+42     	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
 266:	a1 e3       	ldi	r26, 0x31	; 49
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e1 e3       	ldi	r30, 0x31	; 49
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	48 2f       	mov	r20, r24
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 2e       	mov	r0, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_u8SetPinDirection+0x1d0>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_u8SetPinDirection+0x1cc>
 288:	84 2b       	or	r24, r20
 28a:	8c 93       	st	X, r24
 28c:	01 c0       	rjmp	.+2      	; 0x290 <DIO_u8SetPinDirection+0x1dc>
			 		 
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK;
 28e:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return local_u8ErrorState;
 290:	89 81       	ldd	r24, Y+1	; 0x01
}
 292:	26 96       	adiw	r28, 0x06	; 6
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	cf 91       	pop	r28
 2a0:	df 91       	pop	r29
 2a2:	08 95       	ret

000002a4 <DIO_u8SetPinValue>:

u8   DIO_u8SetPinValue     (u8 copy_u8PortId, u8   copy_u8PinId ,u8  copy_u8PinValue) 
{
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <DIO_u8SetPinValue+0x6>
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <DIO_u8SetPinValue+0x8>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_u8SetPinValue+0xa>
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	8a 83       	std	Y+2, r24	; 0x02
 2b4:	6b 83       	std	Y+3, r22	; 0x03
 2b6:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = STD_TYPES_OK;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PinId<=DIO_u8_PIN7)&&
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	84 30       	cpi	r24, 0x04	; 4
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <DIO_u8SetPinValue+0x20>
 2c2:	dd c0       	rjmp	.+442    	; 0x47e <DIO_u8SetPinValue+0x1da>
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <DIO_u8SetPinValue+0x28>
 2ca:	d9 c0       	rjmp	.+434    	; 0x47e <DIO_u8SetPinValue+0x1da>
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	88 23       	and	r24, r24
 2d0:	21 f0       	breq	.+8      	; 0x2da <DIO_u8SetPinValue+0x36>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	09 f0       	breq	.+2      	; 0x2da <DIO_u8SetPinValue+0x36>
 2d8:	d2 c0       	rjmp	.+420    	; 0x47e <DIO_u8SetPinValue+0x1da>
	  ((copy_u8PinValue ==LOW)||(copy_u8PinValue ==HIGH)))
	  {
		  switch(copy_u8PortId)
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	3e 83       	std	Y+6, r19	; 0x06
 2e2:	2d 83       	std	Y+5, r18	; 0x05
 2e4:	8d 81       	ldd	r24, Y+5	; 0x05
 2e6:	9e 81       	ldd	r25, Y+6	; 0x06
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	91 05       	cpc	r25, r1
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <DIO_u8SetPinValue+0x4c>
 2ee:	43 c0       	rjmp	.+134    	; 0x376 <DIO_u8SetPinValue+0xd2>
 2f0:	2d 81       	ldd	r18, Y+5	; 0x05
 2f2:	3e 81       	ldd	r19, Y+6	; 0x06
 2f4:	22 30       	cpi	r18, 0x02	; 2
 2f6:	31 05       	cpc	r19, r1
 2f8:	2c f4       	brge	.+10     	; 0x304 <DIO_u8SetPinValue+0x60>
 2fa:	8d 81       	ldd	r24, Y+5	; 0x05
 2fc:	9e 81       	ldd	r25, Y+6	; 0x06
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	71 f0       	breq	.+28     	; 0x31e <DIO_u8SetPinValue+0x7a>
 302:	be c0       	rjmp	.+380    	; 0x480 <DIO_u8SetPinValue+0x1dc>
 304:	2d 81       	ldd	r18, Y+5	; 0x05
 306:	3e 81       	ldd	r19, Y+6	; 0x06
 308:	22 30       	cpi	r18, 0x02	; 2
 30a:	31 05       	cpc	r19, r1
 30c:	09 f4       	brne	.+2      	; 0x310 <DIO_u8SetPinValue+0x6c>
 30e:	5f c0       	rjmp	.+190    	; 0x3ce <DIO_u8SetPinValue+0x12a>
 310:	8d 81       	ldd	r24, Y+5	; 0x05
 312:	9e 81       	ldd	r25, Y+6	; 0x06
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	91 05       	cpc	r25, r1
 318:	09 f4       	brne	.+2      	; 0x31c <DIO_u8SetPinValue+0x78>
 31a:	85 c0       	rjmp	.+266    	; 0x426 <DIO_u8SetPinValue+0x182>
 31c:	b1 c0       	rjmp	.+354    	; 0x480 <DIO_u8SetPinValue+0x1dc>
		  {
			 case DIO_u8_PORTA :
		       if(copy_u8PinValue == LOW)
 31e:	8c 81       	ldd	r24, Y+4	; 0x04
 320:	88 23       	and	r24, r24
 322:	a9 f4       	brne	.+42     	; 0x34e <DIO_u8SetPinValue+0xaa>
		        {
			      CLR_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
 324:	ab e3       	ldi	r26, 0x3B	; 59
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	eb e3       	ldi	r30, 0x3B	; 59
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	48 2f       	mov	r20, r24
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_u8SetPinValue+0x9e>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_u8SetPinValue+0x9a>
 346:	80 95       	com	r24
 348:	84 23       	and	r24, r20
 34a:	8c 93       	st	X, r24
 34c:	99 c0       	rjmp	.+306    	; 0x480 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
 34e:	ab e3       	ldi	r26, 0x3B	; 59
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	eb e3       	ldi	r30, 0x3B	; 59
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8SetPinValue+0xc8>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8SetPinValue+0xc4>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	85 c0       	rjmp	.+266    	; 0x480 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTB :
		       if(copy_u8PinValue == LOW)
 376:	8c 81       	ldd	r24, Y+4	; 0x04
 378:	88 23       	and	r24, r24
 37a:	a9 f4       	brne	.+42     	; 0x3a6 <DIO_u8SetPinValue+0x102>
		        {
			      CLR_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
 37c:	a8 e3       	ldi	r26, 0x38	; 56
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	e8 e3       	ldi	r30, 0x38	; 56
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8SetPinValue+0xf6>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8SetPinValue+0xf2>
 39e:	80 95       	com	r24
 3a0:	84 23       	and	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	6d c0       	rjmp	.+218    	; 0x480 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
 3a6:	a8 e3       	ldi	r26, 0x38	; 56
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e8 e3       	ldi	r30, 0x38	; 56
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8SetPinValue+0x120>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8SetPinValue+0x11c>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	59 c0       	rjmp	.+178    	; 0x480 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTC :
		       if(copy_u8PinValue == LOW)
 3ce:	8c 81       	ldd	r24, Y+4	; 0x04
 3d0:	88 23       	and	r24, r24
 3d2:	a9 f4       	brne	.+42     	; 0x3fe <DIO_u8SetPinValue+0x15a>
		        {
			      CLR_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
 3d4:	a5 e3       	ldi	r26, 0x35	; 53
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e5 e3       	ldi	r30, 0x35	; 53
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_u8SetPinValue+0x14e>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_u8SetPinValue+0x14a>
 3f6:	80 95       	com	r24
 3f8:	84 23       	and	r24, r20
 3fa:	8c 93       	st	X, r24
 3fc:	41 c0       	rjmp	.+130    	; 0x480 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
 3fe:	a5 e3       	ldi	r26, 0x35	; 53
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e5 e3       	ldi	r30, 0x35	; 53
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	48 2f       	mov	r20, r24
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_u8SetPinValue+0x178>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_u8SetPinValue+0x174>
 420:	84 2b       	or	r24, r20
 422:	8c 93       	st	X, r24
 424:	2d c0       	rjmp	.+90     	; 0x480 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTD :
		       if(copy_u8PinValue == LOW)
 426:	8c 81       	ldd	r24, Y+4	; 0x04
 428:	88 23       	and	r24, r24
 42a:	a9 f4       	brne	.+42     	; 0x456 <DIO_u8SetPinValue+0x1b2>
		        {
			      CLR_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
 42c:	a2 e3       	ldi	r26, 0x32	; 50
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e2 e3       	ldi	r30, 0x32	; 50
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_u8SetPinValue+0x1a6>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_u8SetPinValue+0x1a2>
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	8c 93       	st	X, r24
 454:	15 c0       	rjmp	.+42     	; 0x480 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
 456:	a2 e3       	ldi	r26, 0x32	; 50
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	e2 e3       	ldi	r30, 0x32	; 50
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	48 2f       	mov	r20, r24
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	28 2f       	mov	r18, r24
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 2e       	mov	r0, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_u8SetPinValue+0x1d0>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_u8SetPinValue+0x1cc>
 478:	84 2b       	or	r24, r20
 47a:	8c 93       	st	X, r24
 47c:	01 c0       	rjmp	.+2      	; 0x480 <DIO_u8SetPinValue+0x1dc>
			   
		  }
	  }
	else
	{
		local_u8ErrorState =STD_TYPES_NOK ;
 47e:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
 480:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 482:	26 96       	adiw	r28, 0x06	; 6
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	cf 91       	pop	r28
 490:	df 91       	pop	r29
 492:	08 95       	ret

00000494 <DIO_u8GetPinValue>:
 
u8   DIO_u8GetPinValue     (u8 copy_u8PortId, u8   copy_u8PinId ,u8  *copy_Pu8PinValue) 
{
 494:	df 93       	push	r29
 496:	cf 93       	push	r28
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	28 97       	sbiw	r28, 0x08	; 8
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	8b 83       	std	Y+3, r24	; 0x03
 4aa:	6c 83       	std	Y+4, r22	; 0x04
 4ac:	5e 83       	std	Y+6, r21	; 0x06
 4ae:	4d 83       	std	Y+5, r20	; 0x05
	u8 local_u8ErrorState = STD_TYPES_OK;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	8a 83       	std	Y+2, r24	; 0x02
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PinId <=DIO_u8_PIN7)&&(copy_Pu8PinValue != NULL))
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	84 30       	cpi	r24, 0x04	; 4
 4b8:	08 f0       	brcs	.+2      	; 0x4bc <DIO_u8GetPinValue+0x28>
 4ba:	9f c0       	rjmp	.+318    	; 0x5fa <DIO_u8GetPinValue+0x166>
 4bc:	8c 81       	ldd	r24, Y+4	; 0x04
 4be:	88 30       	cpi	r24, 0x08	; 8
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <DIO_u8GetPinValue+0x30>
 4c2:	9b c0       	rjmp	.+310    	; 0x5fa <DIO_u8GetPinValue+0x166>
 4c4:	8d 81       	ldd	r24, Y+5	; 0x05
 4c6:	9e 81       	ldd	r25, Y+6	; 0x06
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	09 f4       	brne	.+2      	; 0x4ce <DIO_u8GetPinValue+0x3a>
 4cc:	96 c0       	rjmp	.+300    	; 0x5fa <DIO_u8GetPinValue+0x166>
	{
		u8 local_returnValue;
		switch(copy_u8PortId)
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	38 87       	std	Y+8, r19	; 0x08
 4d6:	2f 83       	std	Y+7, r18	; 0x07
 4d8:	4f 81       	ldd	r20, Y+7	; 0x07
 4da:	58 85       	ldd	r21, Y+8	; 0x08
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	51 05       	cpc	r21, r1
 4e0:	a9 f1       	breq	.+106    	; 0x54c <DIO_u8GetPinValue+0xb8>
 4e2:	8f 81       	ldd	r24, Y+7	; 0x07
 4e4:	98 85       	ldd	r25, Y+8	; 0x08
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	91 05       	cpc	r25, r1
 4ea:	34 f4       	brge	.+12     	; 0x4f8 <DIO_u8GetPinValue+0x64>
 4ec:	2f 81       	ldd	r18, Y+7	; 0x07
 4ee:	38 85       	ldd	r19, Y+8	; 0x08
 4f0:	21 15       	cp	r18, r1
 4f2:	31 05       	cpc	r19, r1
 4f4:	71 f0       	breq	.+28     	; 0x512 <DIO_u8GetPinValue+0x7e>
 4f6:	82 c0       	rjmp	.+260    	; 0x5fc <DIO_u8GetPinValue+0x168>
 4f8:	4f 81       	ldd	r20, Y+7	; 0x07
 4fa:	58 85       	ldd	r21, Y+8	; 0x08
 4fc:	42 30       	cpi	r20, 0x02	; 2
 4fe:	51 05       	cpc	r21, r1
 500:	09 f4       	brne	.+2      	; 0x504 <DIO_u8GetPinValue+0x70>
 502:	41 c0       	rjmp	.+130    	; 0x586 <DIO_u8GetPinValue+0xf2>
 504:	8f 81       	ldd	r24, Y+7	; 0x07
 506:	98 85       	ldd	r25, Y+8	; 0x08
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	91 05       	cpc	r25, r1
 50c:	09 f4       	brne	.+2      	; 0x510 <DIO_u8GetPinValue+0x7c>
 50e:	58 c0       	rjmp	.+176    	; 0x5c0 <DIO_u8GetPinValue+0x12c>
 510:	75 c0       	rjmp	.+234    	; 0x5fc <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA :
			 local_returnValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
 512:	e9 e3       	ldi	r30, 0x39	; 57
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	8c 81       	ldd	r24, Y+4	; 0x04
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	a9 01       	movw	r20, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_u8GetPinValue+0x96>
 526:	55 95       	asr	r21
 528:	47 95       	ror	r20
 52a:	8a 95       	dec	r24
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_u8GetPinValue+0x92>
 52e:	ca 01       	movw	r24, r20
 530:	81 70       	andi	r24, 0x01	; 1
 532:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	29 f4       	brne	.+10     	; 0x544 <DIO_u8GetPinValue+0xb0>
			  *copy_Pu8PinValue = HIGH;
 53a:	ed 81       	ldd	r30, Y+5	; 0x05
 53c:	fe 81       	ldd	r31, Y+6	; 0x06
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 83       	st	Z, r24
 542:	5c c0       	rjmp	.+184    	; 0x5fc <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 
 544:	ed 81       	ldd	r30, Y+5	; 0x05
 546:	fe 81       	ldd	r31, Y+6	; 0x06
 548:	10 82       	st	Z, r1
 54a:	58 c0       	rjmp	.+176    	; 0x5fc <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTB :
			  local_returnValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
 54c:	e6 e3       	ldi	r30, 0x36	; 54
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	8c 81       	ldd	r24, Y+4	; 0x04
 558:	88 2f       	mov	r24, r24
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	a9 01       	movw	r20, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_u8GetPinValue+0xd0>
 560:	55 95       	asr	r21
 562:	47 95       	ror	r20
 564:	8a 95       	dec	r24
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_u8GetPinValue+0xcc>
 568:	ca 01       	movw	r24, r20
 56a:	81 70       	andi	r24, 0x01	; 1
 56c:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	29 f4       	brne	.+10     	; 0x57e <DIO_u8GetPinValue+0xea>
			  *copy_Pu8PinValue = HIGH;
 574:	ed 81       	ldd	r30, Y+5	; 0x05
 576:	fe 81       	ldd	r31, Y+6	; 0x06
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	80 83       	st	Z, r24
 57c:	3f c0       	rjmp	.+126    	; 0x5fc <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
 57e:	ed 81       	ldd	r30, Y+5	; 0x05
 580:	fe 81       	ldd	r31, Y+6	; 0x06
 582:	10 82       	st	Z, r1
 584:	3b c0       	rjmp	.+118    	; 0x5fc <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTC :
			 local_returnValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
 586:	e3 e3       	ldi	r30, 0x33	; 51
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	8c 81       	ldd	r24, Y+4	; 0x04
 592:	88 2f       	mov	r24, r24
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	a9 01       	movw	r20, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_u8GetPinValue+0x10a>
 59a:	55 95       	asr	r21
 59c:	47 95       	ror	r20
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_u8GetPinValue+0x106>
 5a2:	ca 01       	movw	r24, r20
 5a4:	81 70       	andi	r24, 0x01	; 1
 5a6:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <DIO_u8GetPinValue+0x124>
			  *copy_Pu8PinValue = HIGH;
 5ae:	ed 81       	ldd	r30, Y+5	; 0x05
 5b0:	fe 81       	ldd	r31, Y+6	; 0x06
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	80 83       	st	Z, r24
 5b6:	22 c0       	rjmp	.+68     	; 0x5fc <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
 5b8:	ed 81       	ldd	r30, Y+5	; 0x05
 5ba:	fe 81       	ldd	r31, Y+6	; 0x06
 5bc:	10 82       	st	Z, r1
 5be:	1e c0       	rjmp	.+60     	; 0x5fc <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTD :
			 local_returnValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
 5c0:	e0 e3       	ldi	r30, 0x30	; 48
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	8c 81       	ldd	r24, Y+4	; 0x04
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	a9 01       	movw	r20, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_u8GetPinValue+0x144>
 5d4:	55 95       	asr	r21
 5d6:	47 95       	ror	r20
 5d8:	8a 95       	dec	r24
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_u8GetPinValue+0x140>
 5dc:	ca 01       	movw	r24, r20
 5de:	81 70       	andi	r24, 0x01	; 1
 5e0:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <DIO_u8GetPinValue+0x15e>
			  *copy_Pu8PinValue = HIGH;
 5e8:	ed 81       	ldd	r30, Y+5	; 0x05
 5ea:	fe 81       	ldd	r31, Y+6	; 0x06
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	80 83       	st	Z, r24
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
 5f2:	ed 81       	ldd	r30, Y+5	; 0x05
 5f4:	fe 81       	ldd	r31, Y+6	; 0x06
 5f6:	10 82       	st	Z, r1
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <DIO_u8GetPinValue+0x168>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
 5fa:	1a 82       	std	Y+2, r1	; 0x02
	}
	return local_u8ErrorState ;
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
	
	
	
}
 5fe:	28 96       	adiw	r28, 0x08	; 8
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	cf 91       	pop	r28
 60c:	df 91       	pop	r29
 60e:	08 95       	ret

00000610 <DIO_u8SetPortDirection>:

u8   DIO_u8SetPortDirection (u8 copy_u8PortId, u8   copy_u8PinDirection)
{
 610:	df 93       	push	r29
 612:	cf 93       	push	r28
 614:	00 d0       	rcall	.+0      	; 0x616 <DIO_u8SetPortDirection+0x6>
 616:	00 d0       	rcall	.+0      	; 0x618 <DIO_u8SetPortDirection+0x8>
 618:	0f 92       	push	r0
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	8a 83       	std	Y+2, r24	; 0x02
 620:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK ;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&((copy_u8PinDirection ==DIO_u8_INPUT)||(copy_u8PinDirection ==DIO_u8_OUTPUT)))
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	84 30       	cpi	r24, 0x04	; 4
 62a:	08 f0       	brcs	.+2      	; 0x62e <DIO_u8SetPortDirection+0x1e>
 62c:	56 c0       	rjmp	.+172    	; 0x6da <DIO_u8SetPortDirection+0xca>
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	88 23       	and	r24, r24
 632:	21 f0       	breq	.+8      	; 0x63c <DIO_u8SetPortDirection+0x2c>
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	09 f0       	breq	.+2      	; 0x63c <DIO_u8SetPortDirection+0x2c>
 63a:	4f c0       	rjmp	.+158    	; 0x6da <DIO_u8SetPortDirection+0xca>
	{
		switch(copy_u8PortId)
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	3d 83       	std	Y+5, r19	; 0x05
 644:	2c 83       	std	Y+4, r18	; 0x04
 646:	8c 81       	ldd	r24, Y+4	; 0x04
 648:	9d 81       	ldd	r25, Y+5	; 0x05
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	91 05       	cpc	r25, r1
 64e:	09 f1       	breq	.+66     	; 0x692 <DIO_u8SetPortDirection+0x82>
 650:	2c 81       	ldd	r18, Y+4	; 0x04
 652:	3d 81       	ldd	r19, Y+5	; 0x05
 654:	22 30       	cpi	r18, 0x02	; 2
 656:	31 05       	cpc	r19, r1
 658:	2c f4       	brge	.+10     	; 0x664 <DIO_u8SetPortDirection+0x54>
 65a:	8c 81       	ldd	r24, Y+4	; 0x04
 65c:	9d 81       	ldd	r25, Y+5	; 0x05
 65e:	00 97       	sbiw	r24, 0x00	; 0
 660:	61 f0       	breq	.+24     	; 0x67a <DIO_u8SetPortDirection+0x6a>
 662:	3c c0       	rjmp	.+120    	; 0x6dc <DIO_u8SetPortDirection+0xcc>
 664:	2c 81       	ldd	r18, Y+4	; 0x04
 666:	3d 81       	ldd	r19, Y+5	; 0x05
 668:	22 30       	cpi	r18, 0x02	; 2
 66a:	31 05       	cpc	r19, r1
 66c:	f1 f0       	breq	.+60     	; 0x6aa <DIO_u8SetPortDirection+0x9a>
 66e:	8c 81       	ldd	r24, Y+4	; 0x04
 670:	9d 81       	ldd	r25, Y+5	; 0x05
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	91 05       	cpc	r25, r1
 676:	29 f1       	breq	.+74     	; 0x6c2 <DIO_u8SetPortDirection+0xb2>
 678:	31 c0       	rjmp	.+98     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
		{
			case DIO_u8_PORTA :
			  if(copy_u8PinDirection == HIGH)
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	29 f4       	brne	.+10     	; 0x68a <DIO_u8SetPortDirection+0x7a>
			  {
				 SET_PORT(DIO_U8_DDRA_REG);
 680:	ea e3       	ldi	r30, 0x3A	; 58
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	80 83       	st	Z, r24
 688:	29 c0       	rjmp	.+82     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRA_REG);
 68a:	ea e3       	ldi	r30, 0x3A	; 58
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	10 82       	st	Z, r1
 690:	25 c0       	rjmp	.+74     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			  }
			break;  
			case DIO_u8_PORTB :
			  if(copy_u8PinDirection == HIGH)
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	29 f4       	brne	.+10     	; 0x6a2 <DIO_u8SetPortDirection+0x92>
			  {
				 SET_PORT(DIO_U8_DDRB_REG);
 698:	e7 e3       	ldi	r30, 0x37	; 55
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	80 83       	st	Z, r24
 6a0:	1d c0       	rjmp	.+58     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRB_REG);
 6a2:	e7 e3       	ldi	r30, 0x37	; 55
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	10 82       	st	Z, r1
 6a8:	19 c0       	rjmp	.+50     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			  }
			break;
			case DIO_u8_PORTC :
			  if(copy_u8PinDirection == HIGH)
 6aa:	8b 81       	ldd	r24, Y+3	; 0x03
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	29 f4       	brne	.+10     	; 0x6ba <DIO_u8SetPortDirection+0xaa>
			  {
				 SET_PORT(DIO_U8_DDRC_REG);
 6b0:	e4 e3       	ldi	r30, 0x34	; 52
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	80 83       	st	Z, r24
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRC_REG);
 6ba:	e4 e3       	ldi	r30, 0x34	; 52
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	10 82       	st	Z, r1
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			  }
			break;
			case DIO_u8_PORTD :
			  if(copy_u8PinDirection == HIGH)
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	29 f4       	brne	.+10     	; 0x6d2 <DIO_u8SetPortDirection+0xc2>
			  {
				 SET_PORT(DIO_U8_DDRD_REG);
 6c8:	e1 e3       	ldi	r30, 0x31	; 49
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	80 83       	st	Z, r24
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRD_REG);
 6d2:	e1 e3       	ldi	r30, 0x31	; 49
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	10 82       	st	Z, r1
 6d8:	01 c0       	rjmp	.+2      	; 0x6dc <DIO_u8SetPortDirection+0xcc>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK;
 6da:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <DIO_u8SetPortValue>:


u8   DIO_u8SetPortValue    (u8 copy_u8PortId, u8   copy_u8PortValue) 
{
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <DIO_u8SetPortValue+0x6>
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <DIO_u8SetPortValue+0x8>
 6f6:	0f 92       	push	r0
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
 6fc:	8a 83       	std	Y+2, r24	; 0x02
 6fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PortValue<=MAX_PORT_VALUE))
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	84 30       	cpi	r24, 0x04	; 4
 708:	98 f5       	brcc	.+102    	; 0x770 <DIO_u8SetPortValue+0x82>
	{
		switch(copy_u8PortId)
 70a:	8a 81       	ldd	r24, Y+2	; 0x02
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	3d 83       	std	Y+5, r19	; 0x05
 712:	2c 83       	std	Y+4, r18	; 0x04
 714:	8c 81       	ldd	r24, Y+4	; 0x04
 716:	9d 81       	ldd	r25, Y+5	; 0x05
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	91 05       	cpc	r25, r1
 71c:	d1 f0       	breq	.+52     	; 0x752 <DIO_u8SetPortValue+0x64>
 71e:	2c 81       	ldd	r18, Y+4	; 0x04
 720:	3d 81       	ldd	r19, Y+5	; 0x05
 722:	22 30       	cpi	r18, 0x02	; 2
 724:	31 05       	cpc	r19, r1
 726:	2c f4       	brge	.+10     	; 0x732 <DIO_u8SetPortValue+0x44>
 728:	8c 81       	ldd	r24, Y+4	; 0x04
 72a:	9d 81       	ldd	r25, Y+5	; 0x05
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	61 f0       	breq	.+24     	; 0x748 <DIO_u8SetPortValue+0x5a>
 730:	20 c0       	rjmp	.+64     	; 0x772 <DIO_u8SetPortValue+0x84>
 732:	2c 81       	ldd	r18, Y+4	; 0x04
 734:	3d 81       	ldd	r19, Y+5	; 0x05
 736:	22 30       	cpi	r18, 0x02	; 2
 738:	31 05       	cpc	r19, r1
 73a:	81 f0       	breq	.+32     	; 0x75c <DIO_u8SetPortValue+0x6e>
 73c:	8c 81       	ldd	r24, Y+4	; 0x04
 73e:	9d 81       	ldd	r25, Y+5	; 0x05
 740:	83 30       	cpi	r24, 0x03	; 3
 742:	91 05       	cpc	r25, r1
 744:	81 f0       	breq	.+32     	; 0x766 <DIO_u8SetPortValue+0x78>
 746:	15 c0       	rjmp	.+42     	; 0x772 <DIO_u8SetPortValue+0x84>
		{
			case DIO_u8_PORTA :
				DIO_U8_PORTA_REG = copy_u8PortValue;
 748:	eb e3       	ldi	r30, 0x3B	; 59
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	80 83       	st	Z, r24
 750:	10 c0       	rjmp	.+32     	; 0x772 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTB :
				DIO_U8_PORTB_REG = copy_u8PortValue;
 752:	e8 e3       	ldi	r30, 0x38	; 56
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	80 83       	st	Z, r24
 75a:	0b c0       	rjmp	.+22     	; 0x772 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTC :
				DIO_U8_PORTC_REG = copy_u8PortValue;
 75c:	e5 e3       	ldi	r30, 0x35	; 53
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	80 83       	st	Z, r24
 764:	06 c0       	rjmp	.+12     	; 0x772 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTD :
				DIO_U8_PORTD_REG = copy_u8PortValue;
 766:	e2 e3       	ldi	r30, 0x32	; 50
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	80 83       	st	Z, r24
 76e:	01 c0       	rjmp	.+2      	; 0x772 <DIO_u8SetPortValue+0x84>
		}
		
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
 770:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
 772:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue    (u8 copy_u8PortId, u8 * copy_Pu8PortValue) 
{
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	00 d0       	rcall	.+0      	; 0x78a <DIO_u8GetPortValue+0x6>
 78a:	00 d0       	rcall	.+0      	; 0x78c <DIO_u8GetPortValue+0x8>
 78c:	00 d0       	rcall	.+0      	; 0x78e <DIO_u8GetPortValue+0xa>
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	8a 83       	std	Y+2, r24	; 0x02
 794:	7c 83       	std	Y+4, r23	; 0x04
 796:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK;
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_Pu8PortValue != NULL))
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	84 30       	cpi	r24, 0x04	; 4
 7a0:	08 f0       	brcs	.+2      	; 0x7a4 <DIO_u8GetPortValue+0x20>
 7a2:	3f c0       	rjmp	.+126    	; 0x822 <DIO_u8GetPortValue+0x9e>
 7a4:	8b 81       	ldd	r24, Y+3	; 0x03
 7a6:	9c 81       	ldd	r25, Y+4	; 0x04
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	d9 f1       	breq	.+118    	; 0x822 <DIO_u8GetPortValue+0x9e>
	{
		switch(copy_u8PortId)
 7ac:	8a 81       	ldd	r24, Y+2	; 0x02
 7ae:	28 2f       	mov	r18, r24
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	3e 83       	std	Y+6, r19	; 0x06
 7b4:	2d 83       	std	Y+5, r18	; 0x05
 7b6:	8d 81       	ldd	r24, Y+5	; 0x05
 7b8:	9e 81       	ldd	r25, Y+6	; 0x06
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	91 05       	cpc	r25, r1
 7be:	e1 f0       	breq	.+56     	; 0x7f8 <DIO_u8GetPortValue+0x74>
 7c0:	2d 81       	ldd	r18, Y+5	; 0x05
 7c2:	3e 81       	ldd	r19, Y+6	; 0x06
 7c4:	22 30       	cpi	r18, 0x02	; 2
 7c6:	31 05       	cpc	r19, r1
 7c8:	2c f4       	brge	.+10     	; 0x7d4 <DIO_u8GetPortValue+0x50>
 7ca:	8d 81       	ldd	r24, Y+5	; 0x05
 7cc:	9e 81       	ldd	r25, Y+6	; 0x06
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	61 f0       	breq	.+24     	; 0x7ea <DIO_u8GetPortValue+0x66>
 7d2:	28 c0       	rjmp	.+80     	; 0x824 <DIO_u8GetPortValue+0xa0>
 7d4:	2d 81       	ldd	r18, Y+5	; 0x05
 7d6:	3e 81       	ldd	r19, Y+6	; 0x06
 7d8:	22 30       	cpi	r18, 0x02	; 2
 7da:	31 05       	cpc	r19, r1
 7dc:	a1 f0       	breq	.+40     	; 0x806 <DIO_u8GetPortValue+0x82>
 7de:	8d 81       	ldd	r24, Y+5	; 0x05
 7e0:	9e 81       	ldd	r25, Y+6	; 0x06
 7e2:	83 30       	cpi	r24, 0x03	; 3
 7e4:	91 05       	cpc	r25, r1
 7e6:	b1 f0       	breq	.+44     	; 0x814 <DIO_u8GetPortValue+0x90>
 7e8:	1d c0       	rjmp	.+58     	; 0x824 <DIO_u8GetPortValue+0xa0>
		{
			case DIO_u8_PORTA :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINA_REG);
 7ea:	e9 e3       	ldi	r30, 0x39	; 57
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	eb 81       	ldd	r30, Y+3	; 0x03
 7f2:	fc 81       	ldd	r31, Y+4	; 0x04
 7f4:	80 83       	st	Z, r24
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTB :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINB_REG);
 7f8:	e6 e3       	ldi	r30, 0x36	; 54
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	eb 81       	ldd	r30, Y+3	; 0x03
 800:	fc 81       	ldd	r31, Y+4	; 0x04
 802:	80 83       	st	Z, r24
 804:	0f c0       	rjmp	.+30     	; 0x824 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTC :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINC_REG);
 806:	e3 e3       	ldi	r30, 0x33	; 51
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	eb 81       	ldd	r30, Y+3	; 0x03
 80e:	fc 81       	ldd	r31, Y+4	; 0x04
 810:	80 83       	st	Z, r24
 812:	08 c0       	rjmp	.+16     	; 0x824 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTD :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PIND_REG);
 814:	e0 e3       	ldi	r30, 0x30	; 48
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	eb 81       	ldd	r30, Y+3	; 0x03
 81c:	fc 81       	ldd	r31, Y+4	; 0x04
 81e:	80 83       	st	Z, r24
 820:	01 c0       	rjmp	.+2      	; 0x824 <DIO_u8GetPortValue+0xa0>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
 822:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
 824:	89 81       	ldd	r24, Y+1	; 0x01
}
 826:	26 96       	adiw	r28, 0x06	; 6
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	f8 94       	cli
 82c:	de bf       	out	0x3e, r29	; 62
 82e:	0f be       	out	0x3f, r0	; 63
 830:	cd bf       	out	0x3d, r28	; 61
 832:	cf 91       	pop	r28
 834:	df 91       	pop	r29
 836:	08 95       	ret

00000838 <UART_voidInit>:
#include"UART_private.h"
#include"UART_config.h"


void UART_voidInit(void)
{
 838:	df 93       	push	r29
 83a:	cf 93       	push	r28
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
	UART_u8_UBRR_REG =  103 ;
 840:	e9 e2       	ldi	r30, 0x29	; 41
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	87 e6       	ldi	r24, 0x67	; 103
 846:	80 83       	st	Z, r24
	SET_BIT(UART_u8_UCSRB_REG,3);
 848:	aa e2       	ldi	r26, 0x2A	; 42
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	ea e2       	ldi	r30, 0x2A	; 42
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	88 60       	ori	r24, 0x08	; 8
 854:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,4);
 856:	aa e2       	ldi	r26, 0x2A	; 42
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	ea e2       	ldi	r30, 0x2A	; 42
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	80 61       	ori	r24, 0x10	; 16
 862:	8c 93       	st	X, r24
	UART_u8_UCSRC_REG = (1<<7);
 864:	e0 e4       	ldi	r30, 0x40	; 64
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	80 83       	st	Z, r24

	
}
 86c:	cf 91       	pop	r28
 86e:	df 91       	pop	r29
 870:	08 95       	ret

00000872 <UART_voidTransmit>:

void UART_voidTransmit(u8 copy_u8Data)
{
 872:	df 93       	push	r29
 874:	cf 93       	push	r28
 876:	0f 92       	push	r0
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
 87c:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UART_u8_UCSRA_REG,5));
 87e:	eb e2       	ldi	r30, 0x2B	; 43
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	82 95       	swap	r24
 886:	86 95       	lsr	r24
 888:	87 70       	andi	r24, 0x07	; 7
 88a:	88 2f       	mov	r24, r24
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	81 70       	andi	r24, 0x01	; 1
 890:	90 70       	andi	r25, 0x00	; 0
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	a1 f3       	breq	.-24     	; 0x87e <UART_voidTransmit+0xc>
	UART_u8_UDR_REG = copy_u8Data;
 896:	ec e2       	ldi	r30, 0x2C	; 44
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	89 81       	ldd	r24, Y+1	; 0x01
 89c:	80 83       	st	Z, r24
	
	
	
}
 89e:	0f 90       	pop	r0
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	08 95       	ret

000008a6 <UART_voidRecive>:

u8 UART_voidRecive(void)
{
 8a6:	df 93       	push	r29
 8a8:	cf 93       	push	r28
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
	
	while(!GET_BIT(UART_u8_UCSRA_REG,4));
 8ae:	eb e2       	ldi	r30, 0x2B	; 43
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	82 95       	swap	r24
 8b6:	8f 70       	andi	r24, 0x0F	; 15
 8b8:	88 2f       	mov	r24, r24
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	81 70       	andi	r24, 0x01	; 1
 8be:	90 70       	andi	r25, 0x00	; 0
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	a9 f3       	breq	.-22     	; 0x8ae <UART_voidRecive+0x8>

	return UART_u8_UDR_REG;
 8c4:	ec e2       	ldi	r30, 0x2C	; 44
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
	
}
 8ca:	cf 91       	pop	r28
 8cc:	df 91       	pop	r29
 8ce:	08 95       	ret

000008d0 <main>:
/*MCAL layer*/
#include"DIO_interface.h"
#include"UART_interface.h"

int main(void)
{
 8d0:	df 93       	push	r29
 8d2:	cf 93       	push	r28
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
 8d8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidInit>
	UART_voidInit();
 8dc:	0e 94 1c 04 	call	0x838	; 0x838 <UART_voidInit>
	UART_voidTransmit(1);
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	0e 94 39 04 	call	0x872	; 0x872 <UART_voidTransmit>
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <main+0x16>

000008e8 <_exit>:
 8e8:	f8 94       	cli

000008ea <__stop_program>:
 8ea:	ff cf       	rjmp	.-2      	; 0x8ea <__stop_program>
